<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/Android/src/app/src/main/AndroidManifest.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Android/src/app/src/main/AndroidManifest.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&#10;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    package=&quot;com.google.ai.edge.gallery&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;&#10;    &lt;uses-sdk&#10;        android:minSdkVersion=&quot;26&quot;&#10;        android:compileSdkVersion =&quot;35&quot;&#10;        android:targetSdkVersion=&quot;35&quot; /&gt;&#10;&#10;    &lt;uses-permission android:name=&quot;android.permission.CAMERA&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.FOREGROUND_SERVICE&quot;/&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.FOREGROUND_SERVICE_DATA_SYNC&quot;/&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.POST_NOTIFICATIONS&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.RECORD_AUDIO&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.WAKE_LOCK&quot;/&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot; /&gt;&#10;&#10;    &lt;uses-feature&#10;        android:name=&quot;android.hardware.camera&quot;&#10;        android:required=&quot;false&quot; /&gt;&#10;&#10;    &lt;application&#10;        android:name=&quot;com.google.ai.edge.gallery.GalleryApplication&quot;&#10;        android:allowBackup=&quot;true&quot;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#10;        android:label=&quot;AI Chat Bot&quot;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher&quot;&#10;        android:supportsRtl=&quot;true&quot;&#10;        android:theme=&quot;@style/Theme.Gallery&quot;&#10;        tools:targetApi=&quot;31&quot;&gt;&#10;        &lt;activity&#10;            android:name=&quot;.SplashActivity&quot;&#10;            android:theme=&quot;@style/Theme.Gallery.Splash&quot;&#10;            android:exported=&quot;true&quot;&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/activity&gt;&#10;&#10;&#10;        &lt;activity&#10;            android:name=&quot;.SignInActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:screenOrientation=&quot;portrait&quot; /&gt;&#10;&#10;        &lt;activity&#10;            android:name=&quot;.SignUpActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:screenOrientation=&quot;portrait&quot; /&gt;&#10;&#10;        &lt;activity&#10;            android:name=&quot;.MainActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:screenOrientation=&quot;portrait&quot;&#10;            android:windowSoftInputMode=&quot;adjustResize&quot;&#10;            tools:ignore=&quot;DiscouragedApi,LockedOrientationActivity&quot; /&gt;&#10;&#10;        &lt;provider&#10;            android:name=&quot;androidx.core.content.FileProvider&quot;&#10;            android:authorities=&quot;${applicationId}.provider&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:grantUriPermissions=&quot;true&quot;&gt;&#10;            &lt;meta-data&#10;                android:name=&quot;android.support.FILE_PROVIDER_PATHS&quot;&#10;                android:resource=&quot;@xml/file_paths&quot; /&gt;&#10;        &lt;/provider&gt;&#10;&#10;        &lt;service&#10;            android:name=&quot;androidx.work.impl.foreground.SystemForegroundService&quot;&#10;            android:foregroundServiceType=&quot;dataSync&quot;&#10;            android:exported=&quot;false&quot;&#10;            tools:node=&quot;merge&quot;&gt;&#10;        &lt;/service&gt;&#10;&#10;        &lt;!-- For Firebase Analytics. --&gt;&#10;        &lt;receiver&#10;            android:name=&quot;com.google.android.gms.measurement.AppMeasurementReceiver&quot;&#10;            android:enabled=&quot;true&quot;&#10;            android:exported=&quot;false&quot; /&gt;&#10;        &lt;service android:name=&quot;com.google.android.gms.measurement.AppMeasurementService&quot;&#10;            android:enabled=&quot;true&quot;&#10;            android:exported=&quot;false&quot; /&gt;&#10;        &lt;service&#10;            android:name=&quot;com.google.android.gms.measurement.AppMeasurementJobService&quot;&#10;            android:enabled=&quot;true&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:permission=&quot;android.permission.BIND_JOB_SERVICE&quot; /&gt;&#10;    &lt;/application&gt;&#10;&#10;&lt;/manifest&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&#10;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    package=&quot;com.google.ai.edge.gallery&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;&#10;    &lt;uses-sdk&#10;        android:minSdkVersion=&quot;26&quot;&#10;        android:compileSdkVersion =&quot;35&quot;&#10;        android:targetSdkVersion=&quot;35&quot; /&gt;&#10;&#10;    &lt;uses-permission android:name=&quot;android.permission.CAMERA&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.FOREGROUND_SERVICE&quot;/&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.FOREGROUND_SERVICE_DATA_SYNC&quot;/&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.POST_NOTIFICATIONS&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.RECORD_AUDIO&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.WAKE_LOCK&quot;/&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot; /&gt;&#10;&#10;    &lt;uses-feature&#10;        android:name=&quot;android.hardware.camera&quot;&#10;        android:required=&quot;false&quot; /&gt;&#10;&#10;    &lt;application&#10;        android:name=&quot;com.google.ai.edge.gallery.GalleryApplication&quot;&#10;        android:allowBackup=&quot;true&quot;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#10;        android:label=&quot;AI Chat Bot&quot;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher&quot;&#10;        android:supportsRtl=&quot;true&quot;&#10;        android:theme=&quot;@style/Theme.Gallery&quot;&#10;        tools:targetApi=&quot;31&quot;&gt;&#10;        &lt;activity&#10;            android:name=&quot;.SplashActivity&quot;&#10;            android:theme=&quot;@style/Theme.Gallery.Splash&quot;&#10;            android:exported=&quot;true&quot;&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/activity&gt;&#10;&#10;&#10;        &lt;activity&#10;            android:name=&quot;.SignInActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:screenOrientation=&quot;portrait&quot; /&gt;&#10;&#10;        &lt;activity&#10;            android:name=&quot;.SignUpActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:screenOrientation=&quot;portrait&quot; /&gt;&#10;            &#10;        &lt;activity&#10;            android:name=&quot;.AuthActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:screenOrientation=&quot;portrait&quot; /&gt;&#10;&#10;        &lt;activity&#10;            android:name=&quot;.MainActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:screenOrientation=&quot;portrait&quot;&#10;            android:windowSoftInputMode=&quot;adjustResize&quot;&#10;            tools:ignore=&quot;DiscouragedApi,LockedOrientationActivity&quot; /&gt;&#10;&#10;        &lt;provider&#10;            android:name=&quot;androidx.core.content.FileProvider&quot;&#10;            android:authorities=&quot;${applicationId}.provider&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:grantUriPermissions=&quot;true&quot;&gt;&#10;            &lt;meta-data&#10;                android:name=&quot;android.support.FILE_PROVIDER_PATHS&quot;&#10;                android:resource=&quot;@xml/file_paths&quot; /&gt;&#10;        &lt;/provider&gt;&#10;&#10;        &lt;service&#10;            android:name=&quot;androidx.work.impl.foreground.SystemForegroundService&quot;&#10;            android:foregroundServiceType=&quot;dataSync&quot;&#10;            android:exported=&quot;false&quot;&#10;            tools:node=&quot;merge&quot;&gt;&#10;        &lt;/service&gt;&#10;&#10;        &lt;!-- For Firebase Analytics. --&gt;&#10;        &lt;receiver&#10;            android:name=&quot;com.google.android.gms.measurement.AppMeasurementReceiver&quot;&#10;            android:enabled=&quot;true&quot;&#10;            android:exported=&quot;false&quot; /&gt;&#10;        &lt;service android:name=&quot;com.google.android.gms.measurement.AppMeasurementService&quot;&#10;            android:enabled=&quot;true&quot;&#10;            android:exported=&quot;false&quot; /&gt;&#10;        &lt;service&#10;            android:name=&quot;com.google.android.gms.measurement.AppMeasurementJobService&quot;&#10;            android:enabled=&quot;true&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:permission=&quot;android.permission.BIND_JOB_SERVICE&quot; /&gt;&#10;    &lt;/application&gt;&#10;&#10;&lt;/manifest&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Android/src/app/src/main/java/com/google/ai/edge/gallery/AuthActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Android/src/app/src/main/java/com/google/ai/edge/gallery/AuthActivity.kt" />
              <option name="updatedContent" value="package com.google.ai.edge.gallery&#10;&#10;import android.os.Bundle&#10;import androidx.activity.compose.setContent&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Surface&#10;import androidx.compose.ui.Modifier&#10;import androidx.navigation.compose.rememberNavController&#10;import com.google.ai.edge.gallery.ui.navigation.GalleryNavHost&#10;import dagger.hilt.android.AndroidEntryPoint&#10;&#10;@AndroidEntryPoint&#10;class AuthActivity : AppCompatActivity() {&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;&#10;        setContent {&#10;            MaterialTheme {&#10;                Surface(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    color = MaterialTheme.colorScheme.background&#10;                ) {&#10;                    val navController = rememberNavController()&#10;                    &#10;                    // Use our navigation graph&#10;                    GalleryNavHost(navController = navController)&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Android/src/app/src/main/java/com/google/ai/edge/gallery/AuthViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Android/src/app/src/main/java/com/google/ai/edge/gallery/AuthViewModel.kt" />
              <option name="updatedContent" value="package com.google.ai.edge.gallery&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.google.firebase.auth.FirebaseAuth&#10;import com.google.firebase.auth.FirebaseAuthInvalidCredentialsException&#10;import com.google.firebase.auth.FirebaseAuthInvalidUserException&#10;import com.google.firebase.auth.FirebaseAuthUserCollisionException&#10;import com.google.firebase.auth.FirebaseAuthWeakPasswordException&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.flow.asStateFlow&#10;import kotlinx.coroutines.launch&#10;import kotlinx.coroutines.tasks.await&#10;import javax.inject.Inject&#10;&#10;/**&#10; * Authentication state representing the current UI state for auth operations&#10; */&#10;sealed class AuthState {&#10;    object Idle : AuthState()&#10;    object Loading : AuthState()&#10;    data class Success(val message: String) : AuthState()&#10;    data class Error(val message: String) : AuthState()&#10;}&#10;&#10;/**&#10; * ViewModel that handles authentication operations including email/password and Google sign-in&#10; */&#10;@HiltViewModel&#10;class AuthViewModel @Inject constructor() : ViewModel() {&#10;    &#10;    private val auth: FirebaseAuth = FirebaseAuth.getInstance()&#10;    &#10;    // State flows for sign-in and sign-up operations&#10;    private val _signInState = MutableStateFlow&lt;AuthState&gt;(AuthState.Idle)&#10;    val signInState: StateFlow&lt;AuthState&gt; = _signInState.asStateFlow()&#10;    &#10;    private val _signUpState = MutableStateFlow&lt;AuthState&gt;(AuthState.Idle)&#10;    val signUpState: StateFlow&lt;AuthState&gt; = _signUpState.asStateFlow()&#10;    &#10;    /**&#10;     * Creates a new user account with the given email and password&#10;     *&#10;     * @param email User's email address&#10;     * @param password User's password&#10;     */&#10;    fun createUserWithEmailAndPassword(email: String, password: String) {&#10;        viewModelScope.launch {&#10;            try {&#10;                _signUpState.value = AuthState.Loading&#10;                &#10;                // Validate inputs&#10;                if (email.isBlank() || password.isBlank()) {&#10;                    _signUpState.value = AuthState.Error(&quot;Email and password cannot be empty&quot;)&#10;                    return@launch&#10;                }&#10;                &#10;                // Attempt to create the user&#10;                auth.createUserWithEmailAndPassword(email, password).await()&#10;                &#10;                _signUpState.value = AuthState.Success(&quot;Account created successfully&quot;)&#10;            } catch (e: Exception) {&#10;                val errorMessage = when (e) {&#10;                    is FirebaseAuthWeakPasswordException -&gt; &quot;Password is too weak. Please use a stronger password.&quot;&#10;                    is FirebaseAuthInvalidCredentialsException -&gt; &quot;Invalid email format.&quot;&#10;                    is FirebaseAuthUserCollisionException -&gt; &quot;This email is already in use.&quot;&#10;                    else -&gt; &quot;Sign up failed: ${e.message}&quot;&#10;                }&#10;                _signUpState.value = AuthState.Error(errorMessage)&#10;            }&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Signs in a user with the given email and password&#10;     *&#10;     * @param email User's email address&#10;     * @param password User's password&#10;     */&#10;    fun signInWithEmailAndPassword(email: String, password: String) {&#10;        viewModelScope.launch {&#10;            try {&#10;                _signInState.value = AuthState.Loading&#10;                &#10;                // Validate inputs&#10;                if (email.isBlank() || password.isBlank()) {&#10;                    _signInState.value = AuthState.Error(&quot;Email and password cannot be empty&quot;)&#10;                    return@launch&#10;                }&#10;                &#10;                // Attempt to sign in&#10;                auth.signInWithEmailAndPassword(email, password).await()&#10;                &#10;                _signInState.value = AuthState.Success(&quot;Signed in successfully&quot;)&#10;            } catch (e: Exception) {&#10;                val errorMessage = when (e) {&#10;                    is FirebaseAuthInvalidUserException -&gt; &quot;User does not exist.&quot;&#10;                    is FirebaseAuthInvalidCredentialsException -&gt; &quot;Invalid email or password.&quot;&#10;                    else -&gt; &quot;Sign in failed: ${e.message}&quot;&#10;                }&#10;                _signInState.value = AuthState.Error(errorMessage)&#10;            }&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Resets the sign-in state to idle&#10;     */&#10;    fun resetSignInState() {&#10;        _signInState.value = AuthState.Idle&#10;    }&#10;    &#10;    /**&#10;     * Resets the sign-up state to idle&#10;     */&#10;    fun resetSignUpState() {&#10;        _signUpState.value = AuthState.Idle&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Android/src/app/src/main/java/com/google/ai/edge/gallery/SignInActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Android/src/app/src/main/java/com/google/ai/edge/gallery/SignInActivity.kt" />
              <option name="originalContent" value="package com.google.ai.edge.gallery&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.util.Log&#10;import android.widget.Button&#10;import android.widget.LinearLayout&#10;import android.widget.Toast&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.appcompat.app.AppCompatActivity&#10;import com.google.android.gms.auth.api.signin.GoogleSignIn&#10;import com.google.android.gms.auth.api.signin.GoogleSignInClient&#10;import com.google.android.gms.auth.api.signin.GoogleSignInOptions&#10;import com.google.android.gms.common.api.ApiException&#10;import com.google.firebase.auth.FirebaseAuth&#10;import com.google.firebase.auth.GoogleAuthProvider&#10;&#10;class SignInActivity : AppCompatActivity() {&#10;&#10;    private lateinit var auth: FirebaseAuth&#10;    private lateinit var googleSignInClient: GoogleSignInClient&#10;&#10;    private val signInLauncher = registerForActivityResult(&#10;        ActivityResultContracts.StartActivityForResult()&#10;    ) { result -&gt;&#10;        val data = result.data&#10;        val task = GoogleSignIn.getSignedInAccountFromIntent(data)&#10;        try {&#10;            val account = task.getResult(ApiException::class.java)&#10;            if (account != null) {&#10;                firebaseAuthWithGoogle(account.idToken!!)&#10;            } else {&#10;                Toast.makeText(this, &quot;Sign-in failed&quot;, Toast.LENGTH_SHORT).show()&#10;            }&#10;        } catch (e: ApiException) {&#10;            Log.w(&quot;SignIn&quot;, &quot;Google sign-in failed&quot;, e)&#10;            Toast.makeText(this, &quot;Google sign-in failed&quot;, Toast.LENGTH_SHORT).show()&#10;        }&#10;    }&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.activity_sign_in)&#10;&#10;        auth = FirebaseAuth.getInstance()&#10;&#10;        val gso = GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN)&#10;            .requestIdToken(getString(R.string.default_web_client_id))&#10;            .requestEmail()&#10;            .build()&#10;&#10;        googleSignInClient = GoogleSignIn.getClient(this, gso)&#10;&#10;        findViewById&lt;LinearLayout&gt;(R.id.btnGoogleSignIn).setOnClickListener {&#10;            val signInIntent = googleSignInClient.signInIntent&#10;            signInLauncher.launch(signInIntent)&#10;        }&#10;    }&#10;&#10;    private fun firebaseAuthWithGoogle(idToken: String) {&#10;        val credential = GoogleAuthProvider.getCredential(idToken, null)&#10;        auth.signInWithCredential(credential)&#10;            .addOnCompleteListener(this) { task -&gt;&#10;                if (task.isSuccessful) {&#10;                    startActivity(Intent(this, MainActivity::class.java))&#10;                    finish()&#10;                } else {&#10;                    Log.w(&quot;SignIn&quot;, &quot;signInWithCredential:failure&quot;, task.exception)&#10;                    Toast.makeText(this, &quot;Authentication failed&quot;, Toast.LENGTH_SHORT).show()&#10;                }&#10;            }&#10;    }&#10;&#10;    @Deprecated(&quot;This method has been deprecated in favor of using the\n      {@link OnBackPressedDispatcher} via {@link #getOnBackPressedDispatcher()}.\n      The OnBackPressedDispatcher controls how back button events are dispatched\n      to one or more {@link OnBackPressedCallback} objects.&quot;)&#10;    override fun onBackPressed() {&#10;        super.onBackPressed()&#10;        // Optional: Prevent going back to Splash screen or exit the app&#10;        moveTaskToBack(true)&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.google.ai.edge.gallery&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.util.Log&#10;import android.widget.Toast&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.activity.viewModels&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import com.google.android.gms.auth.api.signin.GoogleSignIn&#10;import com.google.android.gms.auth.api.signin.GoogleSignInClient&#10;import com.google.android.gms.auth.api.signin.GoogleSignInOptions&#10;import com.google.android.gms.common.api.ApiException&#10;import com.google.firebase.auth.FirebaseAuth&#10;import com.google.firebase.auth.GoogleAuthProvider&#10;import dagger.hilt.android.AndroidEntryPoint&#10;&#10;@AndroidEntryPoint&#10;class SignInActivity : AppCompatActivity() {&#10;&#10;    private lateinit var auth: FirebaseAuth&#10;    private lateinit var googleSignInClient: GoogleSignInClient&#10;    private val viewModel: AuthViewModel by viewModels()&#10;&#10;    private val signInLauncher = registerForActivityResult(&#10;        ActivityResultContracts.StartActivityForResult()&#10;    ) { result -&gt;&#10;        val data = result.data&#10;        val task = GoogleSignIn.getSignedInAccountFromIntent(data)&#10;        try {&#10;            val account = task.getResult(ApiException::class.java)&#10;            if (account != null) {&#10;                firebaseAuthWithGoogle(account.idToken!!)&#10;            } else {&#10;                Toast.makeText(this, &quot;Sign-in failed&quot;, Toast.LENGTH_SHORT).show()&#10;            }&#10;        } catch (e: ApiException) {&#10;            Log.w(&quot;SignIn&quot;, &quot;Google sign-in failed&quot;, e)&#10;            Toast.makeText(this, &quot;Google sign-in failed&quot;, Toast.LENGTH_SHORT).show()&#10;        }&#10;    }&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;&#10;        auth = FirebaseAuth.getInstance()&#10;&#10;        val gso = GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN)&#10;            .requestIdToken(getString(R.string.default_web_client_id))&#10;            .requestEmail()&#10;            .build()&#10;&#10;        googleSignInClient = GoogleSignIn.getClient(this, gso)&#10;&#10;        setContent {&#10;            // Collect the sign-in state&#10;            val signInState by viewModel.signInState.collectAsState()&#10;&#10;            // Render the sign-in screen&#10;            SignInScreen(&#10;                onGoogleSignInClick = {&#10;                    val signInIntent = googleSignInClient.signInIntent&#10;                    signInLauncher.launch(signInIntent)&#10;                },&#10;                onEmailSignInClick = { email, password -&gt;&#10;                    viewModel.signInWithEmailAndPassword(email, password)&#10;                },&#10;                onSignUpClick = {&#10;                    // Navigate to the sign-up screen&#10;                    startActivity(Intent(this, SignUpActivity::class.java))&#10;                }&#10;            )&#10;&#10;            // Handle the sign-in state&#10;            when (signInState) {&#10;                is AuthState.Success -&gt; {&#10;                    Toast.makeText(this, (signInState as AuthState.Success).message, Toast.LENGTH_SHORT).show()&#10;                    // Navigate to MainActivity after successful sign-in&#10;                    startActivity(Intent(this, MainActivity::class.java))&#10;                    finish()&#10;                    // Reset the state to avoid showing the success message again on configuration change&#10;                    viewModel.resetSignInState()&#10;                }&#10;                is AuthState.Error -&gt; {&#10;                    Toast.makeText(this, (signInState as AuthState.Error).message, Toast.LENGTH_LONG).show()&#10;                    // Reset the error state&#10;                    viewModel.resetSignInState()&#10;                }&#10;                else -&gt; {&#10;                    // No action needed for Idle or Loading states&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun firebaseAuthWithGoogle(idToken: String) {&#10;        val credential = GoogleAuthProvider.getCredential(idToken, null)&#10;        auth.signInWithCredential(credential)&#10;            .addOnCompleteListener(this) { task -&gt;&#10;                if (task.isSuccessful) {&#10;                    startActivity(Intent(this, MainActivity::class.java))&#10;                    finish()&#10;                } else {&#10;                    Log.w(&quot;SignIn&quot;, &quot;signInWithCredential:failure&quot;, task.exception)&#10;                    Toast.makeText(this, &quot;Authentication failed&quot;, Toast.LENGTH_SHORT).show()&#10;                }&#10;            }&#10;    }&#10;&#10;    @Deprecated(&quot;This method has been deprecated in favor of using the\n      {@link OnBackPressedDispatcher} via {@link #getOnBackPressedDispatcher()}.\n      The OnBackPressedDispatcher controls how back button events are dispatched\n      to one or more {@link OnBackPressedCallback} objects.&quot;)&#10;    override fun onBackPressed() {&#10;        super.onBackPressed()&#10;        // Optional: Prevent going back to Splash screen or exit the app&#10;        moveTaskToBack(true)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Android/src/app/src/main/java/com/google/ai/edge/gallery/SignUpActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Android/src/app/src/main/java/com/google/ai/edge/gallery/SignUpActivity.kt" />
              <option name="updatedContent" value="package com.google.ai.edge.gallery&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.widget.Toast&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.viewModels&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import dagger.hilt.android.AndroidEntryPoint&#10;&#10;@AndroidEntryPoint&#10;class SignUpActivity : AppCompatActivity() {&#10;&#10;    private val viewModel: AuthViewModel by viewModels()&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;&#10;        setContent {&#10;            // Collect the sign-up state&#10;            val signUpState by viewModel.signUpState.collectAsState()&#10;&#10;            // Render the sign-up screen&#10;            SignUpScreen(&#10;                onSignUpClick = { email, password -&gt;&#10;                    viewModel.createUserWithEmailAndPassword(email, password)&#10;                },&#10;                onSignInClick = {&#10;                    // Navigate back to the sign-in screen&#10;                    finish()&#10;                }&#10;            )&#10;&#10;            // Handle the sign-up state&#10;            when (signUpState) {&#10;                is AuthState.Success -&gt; {&#10;                    Toast.makeText(this, (signUpState as AuthState.Success).message, Toast.LENGTH_SHORT).show()&#10;                    // Navigate to MainActivity after successful sign-up&#10;                    startActivity(Intent(this, MainActivity::class.java))&#10;                    finish()&#10;                    // Reset the state to avoid showing the success message again on configuration change&#10;                    viewModel.resetSignUpState()&#10;                }&#10;                is AuthState.Error -&gt; {&#10;                    Toast.makeText(this, (signUpState as AuthState.Error).message, Toast.LENGTH_LONG).show()&#10;                    // Reset the error state&#10;                    viewModel.resetSignUpState()&#10;                }&#10;                else -&gt; {&#10;                    // No action needed for Idle or Loading states&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Android/src/app/src/main/java/com/google/ai/edge/gallery/SignUpScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Android/src/app/src/main/java/com/google/ai/edge/gallery/SignUpScreen.kt" />
              <option name="originalContent" value="                .padding(top = 16.dp)&#10;                .clickable { onSignInClick() }&#10;        )&#10;    }&#10;}&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;&#10;@Composable&#10;fun SignUpScreen(&#10;    onSignUpClick: (String, String) -&gt; Unit,&#10;    onSignInClick: () -&gt; Unit&#10;) {&#10;    var email by remember { mutableStateOf(&quot;&quot;) }&#10;    var password by remember { mutableStateOf(&quot;&quot;) }&#10;    var confirmPassword by remember { mutableStateOf(&quot;&quot;) }&#10;    var passwordsMatch by remember { mutableStateOf(true) }&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(32.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally,&#10;        verticalArrangement = Arrangement.Center&#10;    ) {&#10;        // Title&#10;        Text(&#10;            text = &quot;Create Account&quot;,&#10;            fontSize = 28.sp,&#10;            fontWeight = FontWeight.Bold,&#10;            color = Color(0xFF212121),&#10;            modifier = Modifier.padding(bottom = 32.dp)&#10;        )&#10;" />
              <option name="updatedContent" value="package com.google.ai.edge.gallery&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.text.KeyboardOptions&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.input.ImeAction&#10;import androidx.compose.ui.text.input.KeyboardType&#10;import androidx.compose.ui.text.input.PasswordVisualTransformation&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.text.style.TextDecoration&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;&#10;@Composable&#10;fun SignUpScreen(&#10;    onSignUpClick: (String, String) -&gt; Unit,&#10;    onSignInClick: () -&gt; Unit&#10;) {&#10;    var email by remember { mutableStateOf(&quot;&quot;) }&#10;    var password by remember { mutableStateOf(&quot;&quot;) }&#10;    var confirmPassword by remember { mutableStateOf(&quot;&quot;) }&#10;    var passwordsMatch by remember { mutableStateOf(true) }&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(32.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally,&#10;        verticalArrangement = Arrangement.Center&#10;    ) {&#10;        // Title&#10;        Text(&#10;            text = &quot;Create Account&quot;,&#10;            fontSize = 28.sp,&#10;            fontWeight = FontWeight.Bold,&#10;            color = Color(0xFF212121),&#10;            modifier = Modifier.padding(bottom = 32.dp)&#10;        )&#10;&#10;        // Email Field&#10;        OutlinedTextField(&#10;            value = email,&#10;            onValueChange = { email = it },&#10;            label = { Text(&quot;Email Address&quot;) },&#10;            singleLine = true,&#10;            keyboardOptions = KeyboardOptions(&#10;                keyboardType = KeyboardType.Email,&#10;                imeAction = ImeAction.Next&#10;            ),&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(bottom = 16.dp)&#10;        )&#10;&#10;        // Password Field&#10;        OutlinedTextField(&#10;            value = password,&#10;            onValueChange = { &#10;                password = it&#10;                passwordsMatch = it == confirmPassword || confirmPassword.isEmpty()&#10;            },&#10;            label = { Text(&quot;Password&quot;) },&#10;            singleLine = true,&#10;            visualTransformation = PasswordVisualTransformation(),&#10;            keyboardOptions = KeyboardOptions(&#10;                keyboardType = KeyboardType.Password,&#10;                imeAction = ImeAction.Next&#10;            ),&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(bottom = 16.dp)&#10;        )&#10;&#10;        // Confirm Password Field&#10;        OutlinedTextField(&#10;            value = confirmPassword,&#10;            onValueChange = { &#10;                confirmPassword = it&#10;                passwordsMatch = password == it || it.isEmpty()&#10;            },&#10;            label = { Text(&quot;Confirm Password&quot;) },&#10;            singleLine = true,&#10;            visualTransformation = PasswordVisualTransformation(),&#10;            keyboardOptions = KeyboardOptions(&#10;                keyboardType = KeyboardType.Password,&#10;                imeAction = ImeAction.Done&#10;            ),&#10;            isError = !passwordsMatch,&#10;            supportingText = {&#10;                if (!passwordsMatch) {&#10;                    Text(&#10;                        text = &quot;Passwords don't match&quot;,&#10;                        color = MaterialTheme.colorScheme.error&#10;                    )&#10;                }&#10;            },&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(bottom = 24.dp)&#10;        )&#10;&#10;        // Sign Up Button&#10;        Button(&#10;            onClick = { &#10;                if (passwordsMatch &amp;&amp; password == confirmPassword &amp;&amp; password.isNotEmpty() &amp;&amp; email.isNotEmpty()) {&#10;                    onSignUpClick(email, password)&#10;                }&#10;            },&#10;            enabled = passwordsMatch &amp;&amp; password.isNotEmpty() &amp;&amp; confirmPassword.isNotEmpty() &amp;&amp; email.isNotEmpty(),&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .height(48.dp)&#10;                .padding(bottom = 16.dp)&#10;        ) {&#10;            Text(&quot;Sign Up&quot;)&#10;        }&#10;&#10;        // Sign In Text&#10;        Text(&#10;            text = &quot;Already have an account? Sign In&quot;,&#10;            color = Color(0xFF1976D2),&#10;            textDecoration = TextDecoration.Underline,&#10;            modifier = Modifier&#10;                .padding(top = 16.dp)&#10;                .clickable { onSignInClick() }&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Android/src/app/src/main/java/com/google/ai/edge/gallery/SplashActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Android/src/app/src/main/java/com/google/ai/edge/gallery/SplashActivity.kt" />
              <option name="originalContent" value="package com.google.ai.edge.gallery&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.os.Handler&#10;import android.os.Looper&#10;import androidx.appcompat.app.AppCompatActivity&#10;import com.google.firebase.auth.FirebaseAuth&#10;&#10;class SplashActivity : AppCompatActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.activity_splash)&#10;        Handler(Looper.getMainLooper()).postDelayed({&#10;            val user = FirebaseAuth.getInstance().currentUser&#10;            val intent = if (user != null) {&#10;                Intent(this, MainActivity::class.java)&#10;            } else {&#10;                Intent(this, SignInActivity::class.java)&#10;            }&#10;            startActivity(intent)&#10;            finish()&#10;        }, 1500)&#10;&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package com.google.ai.edge.gallery&#13;&#10;&#13;&#10;import android.content.Intent&#13;&#10;import android.os.Bundle&#13;&#10;import android.os.Handler&#13;&#10;import android.os.Looper&#13;&#10;import androidx.appcompat.app.AppCompatActivity&#13;&#10;import com.google.firebase.auth.FirebaseAuth&#13;&#10;&#13;&#10;class SplashActivity : AppCompatActivity() {&#13;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#13;&#10;        super.onCreate(savedInstanceState)&#13;&#10;        setContentView(R.layout.activity_splash)&#13;&#10;        Handler(Looper.getMainLooper()).postDelayed({&#13;&#10;            val user = FirebaseAuth.getInstance().currentUser&#13;&#10;            val intent = if (user != null) {&#13;&#10;                Intent(this, MainActivity::class.java)&#13;&#10;            } else {&#13;&#10;                // Direct users to the new AuthActivity instead of SignInActivity&#13;&#10;                Intent(this, AuthActivity::class.java)&#13;&#10;            }&#13;&#10;            startActivity(intent)&#13;&#10;            finish()&#13;&#10;        }, 1500)&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Android/src/app/src/main/java/com/google/ai/edge/gallery/ui/auth/AuthViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Android/src/app/src/main/java/com/google/ai/edge/gallery/ui/auth/AuthViewModel.kt" />
              <option name="updatedContent" value="package com.google.ai.edge.gallery.ui.auth&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.google.firebase.auth.FirebaseAuth&#10;import com.google.firebase.auth.FirebaseAuthInvalidCredentialsException&#10;import com.google.firebase.auth.FirebaseAuthInvalidUserException&#10;import com.google.firebase.auth.FirebaseAuthUserCollisionException&#10;import com.google.firebase.auth.FirebaseAuthWeakPasswordException&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.flow.asStateFlow&#10;import kotlinx.coroutines.launch&#10;import kotlinx.coroutines.tasks.await&#10;import javax.inject.Inject&#10;&#10;/**&#10; * Authentication state representing the current UI state for auth operations&#10; */&#10;sealed class AuthState {&#10;    object Idle : AuthState()&#10;    object Loading : AuthState()&#10;    data class Success(val message: String) : AuthState()&#10;    data class Error(val message: String) : AuthState()&#10;}&#10;&#10;/**&#10; * ViewModel that handles authentication operations including email/password and Google sign-in&#10; */&#10;@HiltViewModel&#10;class AuthViewModel @Inject constructor() : ViewModel() {&#10;    &#10;    private val auth: FirebaseAuth = FirebaseAuth.getInstance()&#10;    &#10;    // State flows for sign-in and sign-up operations&#10;    private val _signInState = MutableStateFlow&lt;AuthState&gt;(AuthState.Idle)&#10;    val signInState: StateFlow&lt;AuthState&gt; = _signInState.asStateFlow()&#10;    &#10;    private val _signUpState = MutableStateFlow&lt;AuthState&gt;(AuthState.Idle)&#10;    val signUpState: StateFlow&lt;AuthState&gt; = _signUpState.asStateFlow()&#10;    &#10;    /**&#10;     * Creates a new user account with the given email and password&#10;     *&#10;     * @param email User's email address&#10;     * @param password User's password&#10;     */&#10;    fun createUserWithEmailAndPassword(email: String, password: String) {&#10;        viewModelScope.launch {&#10;            try {&#10;                _signUpState.value = AuthState.Loading&#10;                &#10;                // Validate inputs&#10;                if (email.isBlank() || password.isBlank()) {&#10;                    _signUpState.value = AuthState.Error(&quot;Email and password cannot be empty&quot;)&#10;                    return@launch&#10;                }&#10;                &#10;                // Attempt to create the user&#10;                auth.createUserWithEmailAndPassword(email, password).await()&#10;                &#10;                _signUpState.value = AuthState.Success(&quot;Account created successfully&quot;)&#10;            } catch (e: Exception) {&#10;                val errorMessage = when (e) {&#10;                    is FirebaseAuthWeakPasswordException -&gt; &quot;Password is too weak. Please use a stronger password.&quot;&#10;                    is FirebaseAuthInvalidCredentialsException -&gt; &quot;Invalid email format.&quot;&#10;                    is FirebaseAuthUserCollisionException -&gt; &quot;This email is already in use.&quot;&#10;                    else -&gt; &quot;Sign up failed: ${e.message}&quot;&#10;                }&#10;                _signUpState.value = AuthState.Error(errorMessage)&#10;            }&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Signs in a user with the given email and password&#10;     *&#10;     * @param email User's email address&#10;     * @param password User's password&#10;     */&#10;    fun signInWithEmailAndPassword(email: String, password: String) {&#10;        viewModelScope.launch {&#10;            try {&#10;                _signInState.value = AuthState.Loading&#10;                &#10;                // Validate inputs&#10;                if (email.isBlank() || password.isBlank()) {&#10;                    _signInState.value = AuthState.Error(&quot;Email and password cannot be empty&quot;)&#10;                    return@launch&#10;                }&#10;                &#10;                // Attempt to sign in&#10;                auth.signInWithEmailAndPassword(email, password).await()&#10;                &#10;                _signInState.value = AuthState.Success(&quot;Signed in successfully&quot;)&#10;            } catch (e: Exception) {&#10;                val errorMessage = when (e) {&#10;                    is FirebaseAuthInvalidUserException -&gt; &quot;User does not exist.&quot;&#10;                    is FirebaseAuthInvalidCredentialsException -&gt; &quot;Invalid email or password.&quot;&#10;                    else -&gt; &quot;Sign in failed: ${e.message}&quot;&#10;                }&#10;                _signInState.value = AuthState.Error(errorMessage)&#10;            }&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Resets the sign-in state to idle&#10;     */&#10;    fun resetSignInState() {&#10;        _signInState.value = AuthState.Idle&#10;    }&#10;    &#10;    /**&#10;     * Resets the sign-up state to idle&#10;     */&#10;    fun resetSignUpState() {&#10;        _signUpState.value = AuthState.Idle&#10;    }&#10;    &#10;    /**&#10;     * Checks if a user is currently signed in&#10;     */&#10;    fun isUserSignedIn(): Boolean {&#10;        return auth.currentUser != null&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Android/src/app/src/main/java/com/google/ai/edge/gallery/ui/auth/SignInScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Android/src/app/src/main/java/com/google/ai/edge/gallery/ui/auth/SignInScreen.kt" />
              <option name="updatedContent" value="package com.google.ai.edge.gallery.ui.auth&#10;&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.text.KeyboardOptions&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.input.ImeAction&#10;import androidx.compose.ui.text.input.KeyboardType&#10;import androidx.compose.ui.text.input.PasswordVisualTransformation&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.text.style.TextDecoration&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import com.google.ai.edge.gallery.R&#10;&#10;/**&#10; * Route for the sign-in screen&#10; */&#10;object SignInDestination {&#10;    const val route = &quot;sign_in&quot;&#10;}&#10;&#10;/**&#10; * Sign in screen composable that allows users to sign in with email/password or Google&#10; *&#10; * @param onGoogleSignInClick Callback when the Google sign-in button is clicked&#10; * @param onEmailSignInClick Callback when the email sign-in button is clicked with email and password&#10; * @param onSignUpClick Callback when the &quot;Sign Up&quot; text is clicked&#10; */&#10;@Composable&#10;fun SignInScreen(&#10;    onGoogleSignInClick: () -&gt; Unit,&#10;    onEmailSignInClick: (String, String) -&gt; Unit,&#10;    onSignUpClick: () -&gt; Unit&#10;) {&#10;    var email by remember { mutableStateOf(&quot;&quot;) }&#10;    var password by remember { mutableStateOf(&quot;&quot;) }&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(32.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally,&#10;        verticalArrangement = Arrangement.Center&#10;    ) {&#10;        // App Logo&#10;        Image(&#10;            painter = painterResource(id = R.drawable.ai_logo),&#10;            contentDescription = &quot;App Logo&quot;,&#10;            modifier = Modifier&#10;                .size(100.dp)&#10;                .padding(bottom = 24.dp)&#10;        )&#10;&#10;        // App Title&#10;        Text(&#10;            text = &quot;Welcome to AI Chat Bot&quot;,&#10;            fontSize = 24.sp,&#10;            fontWeight = FontWeight.Bold,&#10;            color = Color(0xFF212121),&#10;            modifier = Modifier.padding(bottom = 8.dp)&#10;        )&#10;&#10;        // App Description&#10;        Text(&#10;            text = &quot;Experience powerful AI features by signing in.&quot;,&#10;            fontSize = 16.sp,&#10;            color = Color(0xFF757575),&#10;            textAlign = TextAlign.Center,&#10;            modifier = Modifier.padding(bottom = 32.dp, start = 16.dp, end = 16.dp)&#10;        )&#10;&#10;        // Email Field&#10;        OutlinedTextField(&#10;            value = email,&#10;            onValueChange = { email = it },&#10;            label = { Text(&quot;Email Address&quot;) },&#10;            singleLine = true,&#10;            keyboardOptions = KeyboardOptions(&#10;                keyboardType = KeyboardType.Email,&#10;                imeAction = ImeAction.Next&#10;            ),&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(bottom = 16.dp)&#10;        )&#10;&#10;        // Password Field&#10;        OutlinedTextField(&#10;            value = password,&#10;            onValueChange = { password = it },&#10;            label = { Text(&quot;Password&quot;) },&#10;            singleLine = true,&#10;            visualTransformation = PasswordVisualTransformation(),&#10;            keyboardOptions = KeyboardOptions(&#10;                keyboardType = KeyboardType.Password,&#10;                imeAction = ImeAction.Done&#10;            ),&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(bottom = 24.dp)&#10;        )&#10;&#10;        // Sign In Button&#10;        Button(&#10;            onClick = { onEmailSignInClick(email, password) },&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .height(48.dp)&#10;                .padding(bottom = 16.dp)&#10;        ) {&#10;            Text(&quot;Sign In&quot;)&#10;        }&#10;&#10;        // Google Sign-In Button&#10;        OutlinedButton(&#10;            onClick = onGoogleSignInClick,&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .height(48.dp)&#10;                .padding(bottom = 24.dp)&#10;        ) {&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically,&#10;                horizontalArrangement = Arrangement.Center&#10;            ) {&#10;                Image(&#10;                    painter = painterResource(id = R.drawable.ic_google),&#10;                    contentDescription = &quot;Google Icon&quot;,&#10;                    modifier = Modifier.size(24.dp)&#10;                )&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;                Text(&quot;Sign in with Google&quot;)&#10;            }&#10;        }&#10;&#10;        // Sign Up Text&#10;        Text(&#10;            text = &quot;Don't have an account? Sign Up&quot;,&#10;            color = Color(0xFF1976D2),&#10;            textDecoration = TextDecoration.Underline,&#10;            modifier = Modifier&#10;                .padding(top = 16.dp)&#10;                .clickable { onSignUpClick() }&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Android/src/app/src/main/java/com/google/ai/edge/gallery/ui/auth/SignUpScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Android/src/app/src/main/java/com/google/ai/edge/gallery/ui/auth/SignUpScreen.kt" />
              <option name="updatedContent" value="package com.google.ai.edge.gallery.ui.auth&#10;&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.text.KeyboardOptions&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.input.ImeAction&#10;import androidx.compose.ui.text.input.KeyboardType&#10;import androidx.compose.ui.text.input.PasswordVisualTransformation&#10;import androidx.compose.ui.text.style.TextDecoration&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;&#10;/**&#10; * Route for the sign-up screen&#10; */&#10;object SignUpDestination {&#10;    const val route = &quot;sign_up&quot;&#10;}&#10;&#10;/**&#10; * Sign up screen composable that allows users to create a new account&#10; *&#10; * @param onSignUpClick Callback when the sign-up button is clicked with email and password&#10; * @param onSignInClick Callback when the &quot;Sign In&quot; text is clicked&#10; */&#10;@Composable&#10;fun SignUpScreen(&#10;    onSignUpClick: (String, String) -&gt; Unit,&#10;    onSignInClick: () -&gt; Unit&#10;) {&#10;    var email by remember { mutableStateOf(&quot;&quot;) }&#10;    var password by remember { mutableStateOf(&quot;&quot;) }&#10;    var confirmPassword by remember { mutableStateOf(&quot;&quot;) }&#10;    var passwordsMatch by remember { mutableStateOf(true) }&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(32.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally,&#10;        verticalArrangement = Arrangement.Center&#10;    ) {&#10;        // Title&#10;        Text(&#10;            text = &quot;Create Account&quot;,&#10;            fontSize = 28.sp,&#10;            fontWeight = FontWeight.Bold,&#10;            color = Color(0xFF212121),&#10;            modifier = Modifier.padding(bottom = 32.dp)&#10;        )&#10;&#10;        // Email Field&#10;        OutlinedTextField(&#10;            value = email,&#10;            onValueChange = { email = it },&#10;            label = { Text(&quot;Email Address&quot;) },&#10;            singleLine = true,&#10;            keyboardOptions = KeyboardOptions(&#10;                keyboardType = KeyboardType.Email,&#10;                imeAction = ImeAction.Next&#10;            ),&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(bottom = 16.dp)&#10;        )&#10;&#10;        // Password Field&#10;        OutlinedTextField(&#10;            value = password,&#10;            onValueChange = { &#10;                password = it&#10;                passwordsMatch = it == confirmPassword || confirmPassword.isEmpty()&#10;            },&#10;            label = { Text(&quot;Password&quot;) },&#10;            singleLine = true,&#10;            visualTransformation = PasswordVisualTransformation(),&#10;            keyboardOptions = KeyboardOptions(&#10;                keyboardType = KeyboardType.Password,&#10;                imeAction = ImeAction.Next&#10;            ),&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(bottom = 16.dp)&#10;        )&#10;&#10;        // Confirm Password Field&#10;        OutlinedTextField(&#10;            value = confirmPassword,&#10;            onValueChange = { &#10;                confirmPassword = it&#10;                passwordsMatch = password == it || it.isEmpty()&#10;            },&#10;            label = { Text(&quot;Confirm Password&quot;) },&#10;            singleLine = true,&#10;            visualTransformation = PasswordVisualTransformation(),&#10;            keyboardOptions = KeyboardOptions(&#10;                keyboardType = KeyboardType.Password,&#10;                imeAction = ImeAction.Done&#10;            ),&#10;            isError = !passwordsMatch,&#10;            supportingText = {&#10;                if (!passwordsMatch) {&#10;                    Text(&#10;                        text = &quot;Passwords don't match&quot;,&#10;                        color = MaterialTheme.colorScheme.error&#10;                    )&#10;                }&#10;            },&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(bottom = 24.dp)&#10;        )&#10;&#10;        // Sign Up Button&#10;        Button(&#10;            onClick = { &#10;                if (passwordsMatch &amp;&amp; password == confirmPassword &amp;&amp; password.isNotEmpty() &amp;&amp; email.isNotEmpty()) {&#10;                    onSignUpClick(email, password)&#10;                }&#10;            },&#10;            enabled = passwordsMatch &amp;&amp; password.isNotEmpty() &amp;&amp; confirmPassword.isNotEmpty() &amp;&amp; email.isNotEmpty(),&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .height(48.dp)&#10;                .padding(bottom = 16.dp)&#10;        ) {&#10;            Text(&quot;Sign Up&quot;)&#10;        }&#10;&#10;        // Sign In Text&#10;        Text(&#10;            text = &quot;Already have an account? Sign In&quot;,&#10;            color = Color(0xFF1976D2),&#10;            textDecoration = TextDecoration.Underline,&#10;            modifier = Modifier&#10;                .padding(top = 16.dp)&#10;                .clickable { onSignInClick() }&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Android/src/app/src/main/java/com/google/ai/edge/gallery/ui/navigation/GalleryNavGraph.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Android/src/app/src/main/java/com/google/ai/edge/gallery/ui/navigation/GalleryNavGraph.kt" />
              <option name="originalContent" value="package com.google.ai.edge.gallery.ui.navigation&#10;&#10;import android.util.Log&#10;import androidx.compose.animation.AnimatedContentTransitionScope&#10;import androidx.compose.animation.AnimatedVisibility&#10;import androidx.compose.animation.EnterTransition&#10;import androidx.compose.animation.ExitTransition&#10;import androidx.compose.animation.core.EaseOutExpo&#10;import androidx.compose.animation.core.FiniteAnimationSpec&#10;import androidx.compose.animation.core.tween&#10;import androidx.compose.animation.slideInHorizontally&#10;import androidx.compose.animation.slideOutHorizontally&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.DisposableEffect&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.unit.IntOffset&#10;import androidx.compose.ui.zIndex&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.lifecycle.Lifecycle&#10;import androidx.lifecycle.LifecycleEventObserver&#10;import androidx.lifecycle.compose.LocalLifecycleOwner&#10;import androidx.navigation.NavBackStackEntry&#10;import androidx.navigation.NavHostController&#10;import androidx.navigation.NavType&#10;import androidx.navigation.compose.NavHost&#10;import androidx.navigation.compose.composable&#10;import androidx.navigation.navArgument&#10;import com.google.ai.edge.gallery.data.Model&#10;import com.google.ai.edge.gallery.data.TASK_LLM_ASK_AUDIO&#10;import com.google.ai.edge.gallery.data.TASK_LLM_ASK_IMAGE&#10;import com.google.ai.edge.gallery.data.TASK_LLM_CHAT&#10;import com.google.ai.edge.gallery.data.TASK_LLM_PROMPT_LAB&#10;import com.google.ai.edge.gallery.data.Task&#10;import com.google.ai.edge.gallery.data.TaskType&#10;import com.google.ai.edge.gallery.data.getModelByName&#10;import com.google.ai.edge.gallery.ui.home.HomeScreen&#10;import com.google.ai.edge.gallery.ui.llmchat.LlmAskAudioDestination&#10;import com.google.ai.edge.gallery.ui.llmchat.LlmAskAudioScreen&#10;import com.google.ai.edge.gallery.ui.llmchat.LlmAskAudioViewModel&#10;import com.google.ai.edge.gallery.ui.llmchat.LlmAskImageDestination&#10;import com.google.ai.edge.gallery.ui.llmchat.LlmAskImageScreen&#10;import com.google.ai.edge.gallery.ui.llmchat.LlmAskImageViewModel&#10;import com.google.ai.edge.gallery.ui.llmchat.LlmChatDestination&#10;import com.google.ai.edge.gallery.ui.llmchat.LlmChatScreen&#10;import com.google.ai.edge.gallery.ui.llmchat.LlmChatViewModel&#10;import com.google.ai.edge.gallery.ui.llmsingleturn.LlmSingleTurnDestination&#10;import com.google.ai.edge.gallery.ui.llmsingleturn.LlmSingleTurnScreen&#10;import com.google.ai.edge.gallery.ui.llmsingleturn.LlmSingleTurnViewModel&#10;import com.google.ai.edge.gallery.ui.modelmanager.ModelManager&#10;import com.google.ai.edge.gallery.ui.modelmanager.ModelManagerViewModel&#10;&#10;// Auth screen routes&#10;object SignInDestination {&#10;  const val route = &quot;sign_in&quot;&#10;}&#10;&#10;object SignUpDestination {&#10;  const val route = &quot;sign_up&quot;&#10;}&#10;&#10;private const val TAG = &quot;AGGalleryNavGraph&quot;&#10;private const val ROUTE_PLACEHOLDER = &quot;placeholder&quot;&#10;private const val ENTER_ANIMATION_DURATION_MS = 500&#10;private val ENTER_ANIMATION_EASING = EaseOutExpo&#10;private const val ENTER_ANIMATION_DELAY_MS = 100&#10;&#10;private const val EXIT_ANIMATION_DURATION_MS = 500&#10;private val EXIT_ANIMATION_EASING = EaseOutExpo&#10;&#10;private fun enterTween(): FiniteAnimationSpec&lt;IntOffset&gt; {&#10;  return tween(&#10;    ENTER_ANIMATION_DURATION_MS,&#10;    easing = ENTER_ANIMATION_EASING,&#10;    delayMillis = ENTER_ANIMATION_DELAY_MS,&#10;  )&#10;}&#10;&#10;private fun exitTween(): FiniteAnimationSpec&lt;IntOffset&gt; {&#10;  return tween(EXIT_ANIMATION_DURATION_MS, easing = EXIT_ANIMATION_EASING)&#10;}&#10;&#10;private fun AnimatedContentTransitionScope&lt;*&gt;.slideEnter(): EnterTransition {&#10;  return slideIntoContainer(&#10;    animationSpec = enterTween(),&#10;    towards = AnimatedContentTransitionScope.SlideDirection.Left,&#10;  )&#10;}&#10;&#10;private fun AnimatedContentTransitionScope&lt;*&gt;.slideExit(): ExitTransition {&#10;  return slideOutOfContainer(&#10;    animationSpec = exitTween(),&#10;    towards = AnimatedContentTransitionScope.SlideDirection.Right,&#10;  )&#10;}&#10;&#10;/** Navigation routes. */&#10;@Composable&#10;fun GalleryNavHost(&#10;  navController: NavHostController,&#10;  modifier: Modifier = Modifier,&#10;  modelManagerViewModel: ModelManagerViewModel = hiltViewModel(),&#10;) {&#10;  val lifecycleOwner = LocalLifecycleOwner.current&#10;  var showModelManager by remember { mutableStateOf(false) }&#10;  var pickedTask by remember { mutableStateOf&lt;Task?&gt;(null) }&#10;&#10;  // Track whether app is in foreground.&#10;  DisposableEffect(lifecycleOwner) {&#10;    val observer = LifecycleEventObserver { _, event -&gt;&#10;      when (event) {&#10;        Lifecycle.Event.ON_START,&#10;        Lifecycle.Event.ON_RESUME -&gt; {&#10;          modelManagerViewModel.setAppInForeground(foreground = true)&#10;        }&#10;        Lifecycle.Event.ON_STOP,&#10;        Lifecycle.Event.ON_PAUSE -&gt; {&#10;          modelManagerViewModel.setAppInForeground(foreground = false)&#10;        }&#10;        else -&gt; {&#10;          /* Do nothing for other events */&#10;        }&#10;      }&#10;    }&#10;&#10;    lifecycleOwner.lifecycle.addObserver(observer)&#10;&#10;    onDispose { lifecycleOwner.lifecycle.removeObserver(observer) }&#10;  }&#10;&#10;  HomeScreen(&#10;    modelManagerViewModel = modelManagerViewModel,&#10;    navigateToTaskScreen = { task -&gt;&#10;      pickedTask = task&#10;      showModelManager = true&#10;    },&#10;  )&#10;&#10;  // Model manager.&#10;  AnimatedVisibility(&#10;    visible = showModelManager,&#10;    enter = slideInHorizontally(initialOffsetX = { it }),&#10;    exit = slideOutHorizontally(targetOffsetX = { it }),&#10;  ) {&#10;    val curPickedTask = pickedTask&#10;    if (curPickedTask != null) {&#10;      ModelManager(&#10;        viewModel = modelManagerViewModel,&#10;        task = curPickedTask,&#10;        onModelClicked = { model -&gt;&#10;          navigateToTaskScreen(&#10;            navController = navController,&#10;            taskType = curPickedTask.type,&#10;            model = model,&#10;          )&#10;        },&#10;        navigateUp = { showModelManager = false },&#10;      )&#10;    }&#10;  }&#10;&#10;  NavHost(&#10;    navController = navController,&#10;    // Default to open home screen.&#10;    startDestination = ROUTE_PLACEHOLDER,&#10;    enterTransition = { EnterTransition.None },&#10;    exitTransition = { ExitTransition.None },&#10;    modifier = modifier.zIndex(1f),&#10;  ) {&#10;    // Placeholder root screen&#10;    composable(route = ROUTE_PLACEHOLDER) { Text(&quot;&quot;) }&#10;&#10;    // LLM chat demos.&#10;    composable(&#10;      route = &quot;${LlmChatDestination.route}/{modelName}&quot;,&#10;      arguments = listOf(navArgument(&quot;modelName&quot;) { type = NavType.StringType }),&#10;      enterTransition = { slideEnter() },&#10;      exitTransition = { slideExit() },&#10;    ) { backStackEntry -&gt;&#10;      val viewModel: LlmChatViewModel = hiltViewModel(backStackEntry)&#10;&#10;      getModelFromNavigationParam(backStackEntry, TASK_LLM_CHAT)?.let { defaultModel -&gt;&#10;        modelManagerViewModel.selectModel(defaultModel)&#10;&#10;        LlmChatScreen(&#10;          viewModel = viewModel,&#10;          modelManagerViewModel = modelManagerViewModel,&#10;          navigateUp = { navController.navigateUp() },&#10;        )&#10;      }&#10;    }&#10;&#10;    // LLM single turn.&#10;    composable(&#10;      route = &quot;${LlmSingleTurnDestination.route}/{modelName}&quot;,&#10;      arguments = listOf(navArgument(&quot;modelName&quot;) { type = NavType.StringType }),&#10;      enterTransition = { slideEnter() },&#10;      exitTransition = { slideExit() },&#10;    ) { backStackEntry -&gt;&#10;      val viewModel: LlmSingleTurnViewModel = hiltViewModel(backStackEntry)&#10;&#10;      getModelFromNavigationParam(backStackEntry, TASK_LLM_PROMPT_LAB)?.let { defaultModel -&gt;&#10;        modelManagerViewModel.selectModel(defaultModel)&#10;&#10;        LlmSingleTurnScreen(&#10;          viewModel = viewModel,&#10;          modelManagerViewModel = modelManagerViewModel,&#10;          navigateUp = { navController.navigateUp() },&#10;        )&#10;      }&#10;    }&#10;&#10;    // Ask image.&#10;    composable(&#10;      route = &quot;${LlmAskImageDestination.route}/{modelName}&quot;,&#10;      arguments = listOf(navArgument(&quot;modelName&quot;) { type = NavType.StringType }),&#10;      enterTransition = { slideEnter() },&#10;      exitTransition = { slideExit() },&#10;    ) { backStackEntry -&gt;&#10;      val viewModel: LlmAskImageViewModel = hiltViewModel()&#10;&#10;      getModelFromNavigationParam(backStackEntry, TASK_LLM_ASK_IMAGE)?.let { defaultModel -&gt;&#10;        modelManagerViewModel.selectModel(defaultModel)&#10;&#10;        LlmAskImageScreen(&#10;          viewModel = viewModel,&#10;          modelManagerViewModel = modelManagerViewModel,&#10;          navigateUp = { navController.navigateUp() },&#10;        )&#10;      }&#10;    }&#10;&#10;    // Ask audio.&#10;    composable(&#10;      route = &quot;${LlmAskAudioDestination.route}/{modelName}&quot;,&#10;      arguments = listOf(navArgument(&quot;modelName&quot;) { type = NavType.StringType }),&#10;      enterTransition = { slideEnter() },&#10;      exitTransition = { slideExit() },&#10;    ) { backStackEntry -&gt;&#10;      val viewModel: LlmAskAudioViewModel = hiltViewModel()&#10;&#10;      getModelFromNavigationParam(backStackEntry, TASK_LLM_ASK_AUDIO)?.let { defaultModel -&gt;&#10;        modelManagerViewModel.selectModel(defaultModel)&#10;&#10;        LlmAskAudioScreen(&#10;          viewModel = viewModel,&#10;          modelManagerViewModel = modelManagerViewModel,&#10;          navigateUp = { navController.navigateUp() },&#10;        )&#10;      }&#10;    }&#10;  }&#10;&#10;  // Handle incoming intents for deep links&#10;  val intent = androidx.activity.compose.LocalActivity.current?.intent&#10;  val data = intent?.data&#10;  if (data != null) {&#10;    intent.data = null&#10;    Log.d(TAG, &quot;navigation link clicked: $data&quot;)&#10;    if (data.toString().startsWith(&quot;com.google.ai.edge.gallery://model/&quot;)) {&#10;      val modelName = data.pathSegments.last()&#10;      getModelByName(modelName)?.let { model -&gt;&#10;        // TODO(jingjin): need to show a list of possible tasks for this model.&#10;        navigateToTaskScreen(&#10;          navController = navController,&#10;          taskType = TaskType.LLM_CHAT,&#10;          model = model,&#10;        )&#10;      }&#10;    }&#10;  }&#10;}&#10;&#10;fun navigateToTaskScreen(&#10;  navController: NavHostController,&#10;  taskType: TaskType,&#10;  model: Model? = null,&#10;) {&#10;  val modelName = model?.name ?: &quot;&quot;&#10;  when (taskType) {&#10;    TaskType.LLM_CHAT -&gt; navController.navigate(&quot;${LlmChatDestination.route}/${modelName}&quot;)&#10;    TaskType.LLM_ASK_IMAGE -&gt; navController.navigate(&quot;${LlmAskImageDestination.route}/${modelName}&quot;)&#10;    TaskType.LLM_ASK_AUDIO -&gt; navController.navigate(&quot;${LlmAskAudioDestination.route}/${modelName}&quot;)&#10;    TaskType.LLM_PROMPT_LAB -&gt;&#10;      navController.navigate(&quot;${LlmSingleTurnDestination.route}/${modelName}&quot;)&#10;    TaskType.TEST_TASK_1 -&gt; {}&#10;    TaskType.TEST_TASK_2 -&gt; {}&#10;  }&#10;}&#10;&#10;fun getModelFromNavigationParam(entry: NavBackStackEntry, task: Task): Model? {&#10;  var modelName = entry.arguments?.getString(&quot;modelName&quot;) ?: &quot;&quot;&#10;  if (modelName.isEmpty()) {&#10;    modelName = task.models[0].name&#10;  }&#10;  val model = getModelByName(modelName)&#10;  return model&#10;}&#10;" />
              <option name="updatedContent" value="package com.google.ai.edge.gallery.ui.navigation&#10;&#10;import android.util.Log&#10;import androidx.compose.animation.AnimatedContentTransitionScope&#10;import androidx.compose.animation.AnimatedVisibility&#10;import androidx.compose.animation.EnterTransition&#10;import androidx.compose.animation.ExitTransition&#10;import androidx.compose.animation.core.EaseOutExpo&#10;import androidx.compose.animation.core.FiniteAnimationSpec&#10;import androidx.compose.animation.core.tween&#10;import androidx.compose.animation.slideInHorizontally&#10;import androidx.compose.animation.slideOutHorizontally&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.DisposableEffect&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.unit.IntOffset&#10;import androidx.compose.ui.zIndex&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.lifecycle.Lifecycle&#10;import androidx.lifecycle.LifecycleEventObserver&#10;import androidx.lifecycle.compose.LocalLifecycleOwner&#10;import androidx.navigation.NavBackStackEntry&#10;import androidx.navigation.NavHostController&#10;import androidx.navigation.NavType&#10;import androidx.navigation.compose.NavHost&#10;import androidx.navigation.compose.composable&#10;import androidx.navigation.navArgument&#10;import com.google.ai.edge.gallery.data.Model&#10;import com.google.ai.edge.gallery.data.TASK_LLM_ASK_AUDIO&#10;import com.google.ai.edge.gallery.data.TASK_LLM_ASK_IMAGE&#10;import com.google.ai.edge.gallery.data.TASK_LLM_CHAT&#10;import com.google.ai.edge.gallery.data.TASK_LLM_PROMPT_LAB&#10;import com.google.ai.edge.gallery.data.Task&#10;import com.google.ai.edge.gallery.data.TaskType&#10;import com.google.ai.edge.gallery.data.getModelByName&#10;import com.google.ai.edge.gallery.ui.auth.AuthViewModel&#10;import com.google.ai.edge.gallery.ui.auth.SignInDestination&#10;import com.google.ai.edge.gallery.ui.auth.SignInScreen&#10;import com.google.ai.edge.gallery.ui.auth.SignUpDestination&#10;import com.google.ai.edge.gallery.ui.auth.SignUpScreen&#10;import com.google.ai.edge.gallery.ui.home.HomeScreen&#10;import com.google.ai.edge.gallery.ui.llmchat.LlmAskAudioDestination&#10;import com.google.ai.edge.gallery.ui.llmchat.LlmAskAudioScreen&#10;import com.google.ai.edge.gallery.ui.llmchat.LlmAskAudioViewModel&#10;import com.google.ai.edge.gallery.ui.llmchat.LlmAskImageDestination&#10;import com.google.ai.edge.gallery.ui.llmchat.LlmAskImageScreen&#10;import com.google.ai.edge.gallery.ui.llmchat.LlmAskImageViewModel&#10;import com.google.ai.edge.gallery.ui.llmchat.LlmChatDestination&#10;import com.google.ai.edge.gallery.ui.llmchat.LlmChatScreen&#10;import com.google.ai.edge.gallery.ui.llmchat.LlmChatViewModel&#10;import com.google.ai.edge.gallery.ui.llmsingleturn.LlmSingleTurnDestination&#10;import com.google.ai.edge.gallery.ui.llmsingleturn.LlmSingleTurnScreen&#10;import com.google.ai.edge.gallery.ui.llmsingleturn.LlmSingleTurnViewModel&#10;import com.google.ai.edge.gallery.ui.modelmanager.ModelManager&#10;import com.google.ai.edge.gallery.ui.modelmanager.ModelManagerViewModel&#10;&#10;// Auth screen routes&#10;object SignInDestination {&#10;  const val route = &quot;sign_in&quot;&#10;}&#10;&#10;object SignUpDestination {&#10;  const val route = &quot;sign_up&quot;&#10;}&#10;&#10;private const val TAG = &quot;AGGalleryNavGraph&quot;&#10;private const val ROUTE_PLACEHOLDER = &quot;placeholder&quot;&#10;private const val ENTER_ANIMATION_DURATION_MS = 500&#10;private val ENTER_ANIMATION_EASING = EaseOutExpo&#10;private const val ENTER_ANIMATION_DELAY_MS = 100&#10;&#10;private const val EXIT_ANIMATION_DURATION_MS = 500&#10;private val EXIT_ANIMATION_EASING = EaseOutExpo&#10;&#10;private fun enterTween(): FiniteAnimationSpec&lt;IntOffset&gt; {&#10;  return tween(&#10;    ENTER_ANIMATION_DURATION_MS,&#10;    easing = ENTER_ANIMATION_EASING,&#10;    delayMillis = ENTER_ANIMATION_DELAY_MS,&#10;  )&#10;}&#10;&#10;private fun exitTween(): FiniteAnimationSpec&lt;IntOffset&gt; {&#10;  return tween(EXIT_ANIMATION_DURATION_MS, easing = EXIT_ANIMATION_EASING)&#10;}&#10;&#10;private fun AnimatedContentTransitionScope&lt;*&gt;.slideEnter(): EnterTransition {&#10;  return slideIntoContainer(&#10;    animationSpec = enterTween(),&#10;    towards = AnimatedContentTransitionScope.SlideDirection.Left,&#10;  )&#10;}&#10;&#10;private fun AnimatedContentTransitionScope&lt;*&gt;.slideExit(): ExitTransition {&#10;  return slideOutOfContainer(&#10;    animationSpec = exitTween(),&#10;    towards = AnimatedContentTransitionScope.SlideDirection.Right,&#10;  )&#10;}&#10;&#10;/** Navigation routes. */&#10;@Composable&#10;fun GalleryNavHost(&#10;  navController: NavHostController,&#10;  modifier: Modifier = Modifier,&#10;  modelManagerViewModel: ModelManagerViewModel = hiltViewModel(),&#10;) {&#10;  val lifecycleOwner = LocalLifecycleOwner.current&#10;  var showModelManager by remember { mutableStateOf(false) }&#10;  var pickedTask by remember { mutableStateOf&lt;Task?&gt;(null) }&#10;&#10;  // Track whether app is in foreground.&#10;  DisposableEffect(lifecycleOwner) {&#10;    val observer = LifecycleEventObserver { _, event -&gt;&#10;      when (event) {&#10;        Lifecycle.Event.ON_START,&#10;        Lifecycle.Event.ON_RESUME -&gt; {&#10;          modelManagerViewModel.setAppInForeground(foreground = true)&#10;        }&#10;        Lifecycle.Event.ON_STOP,&#10;        Lifecycle.Event.ON_PAUSE -&gt; {&#10;          modelManagerViewModel.setAppInForeground(foreground = false)&#10;        }&#10;        else -&gt; {&#10;          /* Do nothing for other events */&#10;        }&#10;      }&#10;    }&#10;&#10;    lifecycleOwner.lifecycle.addObserver(observer)&#10;&#10;    onDispose { lifecycleOwner.lifecycle.removeObserver(observer) }&#10;  }&#10;&#10;  HomeScreen(&#10;    modelManagerViewModel = modelManagerViewModel,&#10;    navigateToTaskScreen = { task -&gt;&#10;      pickedTask = task&#10;      showModelManager = true&#10;    },&#10;  )&#10;&#10;  // Model manager.&#10;  AnimatedVisibility(&#10;    visible = showModelManager,&#10;    enter = slideInHorizontally(initialOffsetX = { it }),&#10;    exit = slideOutHorizontally(targetOffsetX = { it }),&#10;  ) {&#10;    val curPickedTask = pickedTask&#10;    if (curPickedTask != null) {&#10;      ModelManager(&#10;        viewModel = modelManagerViewModel,&#10;        task = curPickedTask,&#10;        onModelClicked = { model -&gt;&#10;          navigateToTaskScreen(&#10;            navController = navController,&#10;            taskType = curPickedTask.type,&#10;            model = model,&#10;          )&#10;        },&#10;        navigateUp = { showModelManager = false },&#10;      )&#10;    }&#10;  }&#10;&#10;  NavHost(&#10;    navController = navController,&#10;    // Default to open home screen.&#10;    startDestination = ROUTE_PLACEHOLDER,&#10;    enterTransition = { EnterTransition.None },&#10;    exitTransition = { ExitTransition.None },&#10;    modifier = modifier.zIndex(1f),&#10;  ) {&#10;    // Placeholder root screen&#10;    composable(route = ROUTE_PLACEHOLDER) { Text(&quot;&quot;) }&#10;&#10;    // Authentication screens&#10;    composable(&#10;      route = SignInDestination.route,&#10;      enterTransition = { slideEnter() },&#10;      exitTransition = { slideExit() },&#10;    ) {&#10;      val viewModel: AuthViewModel = hiltViewModel()&#10;      SignInScreen(&#10;        onGoogleSignInClick = { /* This will be handled in the activity */ },&#10;        onEmailSignInClick = { email, password -&gt; /* This will be handled in the activity */ },&#10;        onSignUpClick = { navController.navigate(SignUpDestination.route) }&#10;      )&#10;    }&#10;&#10;    composable(&#10;      route = SignUpDestination.route,&#10;      enterTransition = { slideEnter() },&#10;      exitTransition = { slideExit() },&#10;    ) {&#10;      val viewModel: AuthViewModel = hiltViewModel()&#10;      SignUpScreen(&#10;        onSignUpClick = { email, password -&gt; /* This will be handled in the activity */ },&#10;        onSignInClick = { navController.navigateUp() }&#10;      )&#10;    }&#10;&#10;    // LLM chat demos.&#10;    composable(&#10;      route = &quot;${LlmChatDestination.route}/{modelName}&quot;,&#10;      arguments = listOf(navArgument(&quot;modelName&quot;) { type = NavType.StringType }),&#10;      enterTransition = { slideEnter() },&#10;      exitTransition = { slideExit() },&#10;    ) { backStackEntry -&gt;&#10;      val viewModel: LlmChatViewModel = hiltViewModel(backStackEntry)&#10;&#10;      getModelFromNavigationParam(backStackEntry, TASK_LLM_CHAT)?.let { defaultModel -&gt;&#10;        modelManagerViewModel.selectModel(defaultModel)&#10;&#10;        LlmChatScreen(&#10;          viewModel = viewModel,&#10;          modelManagerViewModel = modelManagerViewModel,&#10;          navigateUp = { navController.navigateUp() },&#10;        )&#10;      }&#10;    }&#10;&#10;    // LLM single turn.&#10;    composable(&#10;      route = &quot;${LlmSingleTurnDestination.route}/{modelName}&quot;,&#10;      arguments = listOf(navArgument(&quot;modelName&quot;) { type = NavType.StringType }),&#10;      enterTransition = { slideEnter() },&#10;      exitTransition = { slideExit() },&#10;    ) { backStackEntry -&gt;&#10;      val viewModel: LlmSingleTurnViewModel = hiltViewModel(backStackEntry)&#10;&#10;      getModelFromNavigationParam(backStackEntry, TASK_LLM_PROMPT_LAB)?.let { defaultModel -&gt;&#10;        modelManagerViewModel.selectModel(defaultModel)&#10;&#10;        LlmSingleTurnScreen(&#10;          viewModel = viewModel,&#10;          modelManagerViewModel = modelManagerViewModel,&#10;          navigateUp = { navController.navigateUp() },&#10;        )&#10;      }&#10;    }&#10;&#10;    // Ask image.&#10;    composable(&#10;      route = &quot;${LlmAskImageDestination.route}/{modelName}&quot;,&#10;      arguments = listOf(navArgument(&quot;modelName&quot;) { type = NavType.StringType }),&#10;      enterTransition = { slideEnter() },&#10;      exitTransition = { slideExit() },&#10;    ) { backStackEntry -&gt;&#10;      val viewModel: LlmAskImageViewModel = hiltViewModel()&#10;&#10;      getModelFromNavigationParam(backStackEntry, TASK_LLM_ASK_IMAGE)?.let { defaultModel -&gt;&#10;        modelManagerViewModel.selectModel(defaultModel)&#10;&#10;        LlmAskImageScreen(&#10;          viewModel = viewModel,&#10;          modelManagerViewModel = modelManagerViewModel,&#10;          navigateUp = { navController.navigateUp() },&#10;        )&#10;      }&#10;    }&#10;&#10;    // Ask audio.&#10;    composable(&#10;      route = &quot;${LlmAskAudioDestination.route}/{modelName}&quot;,&#10;      arguments = listOf(navArgument(&quot;modelName&quot;) { type = NavType.StringType }),&#10;      enterTransition = { slideEnter() },&#10;      exitTransition = { slideExit() },&#10;    ) { backStackEntry -&gt;&#10;      val viewModel: LlmAskAudioViewModel = hiltViewModel()&#10;&#10;      getModelFromNavigationParam(backStackEntry, TASK_LLM_ASK_AUDIO)?.let { defaultModel -&gt;&#10;        modelManagerViewModel.selectModel(defaultModel)&#10;&#10;        LlmAskAudioScreen(&#10;          viewModel = viewModel,&#10;          modelManagerViewModel = modelManagerViewModel,&#10;          navigateUp = { navController.navigateUp() },&#10;        )&#10;      }&#10;    }&#10;  }&#10;&#10;  // Handle incoming intents for deep links&#10;  val intent = androidx.activity.compose.LocalActivity.current?.intent&#10;  val data = intent?.data&#10;  if (data != null) {&#10;    intent.data = null&#10;    Log.d(TAG, &quot;navigation link clicked: $data&quot;)&#10;    if (data.toString().startsWith(&quot;com.google.ai.edge.gallery://model/&quot;)) {&#10;      val modelName = data.pathSegments.last()&#10;      getModelByName(modelName)?.let { model -&gt;&#10;        // TODO(jingjin): need to show a list of possible tasks for this model.&#10;        navigateToTaskScreen(&#10;          navController = navController,&#10;          taskType = TaskType.LLM_CHAT,&#10;          model = model,&#10;        )&#10;      }&#10;    }&#10;  }&#10;}&#10;&#10;fun navigateToTaskScreen(&#10;  navController: NavHostController,&#10;  taskType: TaskType,&#10;  model: Model? = null,&#10;) {&#10;  val modelName = model?.name ?: &quot;&quot;&#10;  when (taskType) {&#10;    TaskType.LLM_CHAT -&gt; navController.navigate(&quot;${LlmChatDestination.route}/${modelName}&quot;)&#10;    TaskType.LLM_ASK_IMAGE -&gt; navController.navigate(&quot;${LlmAskImageDestination.route}/${modelName}&quot;)&#10;    TaskType.LLM_ASK_AUDIO -&gt; navController.navigate(&quot;${LlmAskAudioDestination.route}/${modelName}&quot;)&#10;    TaskType.LLM_PROMPT_LAB -&gt;&#10;      navController.navigate(&quot;${LlmSingleTurnDestination.route}/${modelName}&quot;)&#10;    TaskType.TEST_TASK_1 -&gt; {}&#10;    TaskType.TEST_TASK_2 -&gt; {}&#10;  }&#10;}&#10;&#10;fun getModelFromNavigationParam(entry: NavBackStackEntry, task: Task): Model? {&#10;  var modelName = entry.arguments?.getString(&quot;modelName&quot;) ?: &quot;&quot;&#10;  if (modelName.isEmpty()) {&#10;    modelName = task.models[0].name&#10;  }&#10;  val model = getModelByName(modelName)&#10;  return model&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>