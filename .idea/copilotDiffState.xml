<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/Android/src/app/src/main/java/com/google/ai/edge/gallery/SignUpScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Android/src/app/src/main/java/com/google/ai/edge/gallery/SignUpScreen.kt" />
              <option name="originalContent" value="package com.google.ai.edge.gallery&#10;&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.text.KeyboardOptions&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.input.ImeAction&#10;import androidx.compose.ui.text.input.KeyboardType&#10;import androidx.compose.ui.text.input.PasswordVisualTransformation&#10;import androidx.compose.ui.text.style.TextDecoration&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.navigation.NavHostController&#10;import com.google.ai.edge.gallery.ui.auth.SignInDestination&#10;&#10;@Composable&#10;fun SignUpScreen(&#10;    navController: NavHostController,&#10;    authViewModel: AuthViewModel&#10;) {&#10;    var email by remember { mutableStateOf(&quot;&quot;) }&#10;    var password by remember { mutableStateOf(&quot;&quot;) }&#10;    var confirmPassword by remember { mutableStateOf(&quot;&quot;) }&#10;    var passwordsMatch by remember { mutableStateOf(true) }&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(32.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally,&#10;        verticalArrangement = Arrangement.Center&#10;    ) {&#10;        // Title&#10;        Text(&#10;            text = &quot;Create Account&quot;,&#10;            fontSize = 28.sp,&#10;            fontWeight = FontWeight.Bold,&#10;            color = Color(0xFF212121),&#10;            modifier = Modifier.padding(bottom = 32.dp)&#10;        )&#10;" />
              <option name="updatedContent" value="package com.google.ai.edge.gallery&#10;&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.text.KeyboardOptions&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.input.ImeAction&#10;import androidx.compose.ui.text.input.KeyboardType&#10;import androidx.compose.ui.text.input.PasswordVisualTransformation&#10;import androidx.compose.ui.text.style.TextDecoration&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.navigation.NavHostController&#10;import com.google.ai.edge.gallery.ui.auth.SignInDestination&#10;&#10;@Composable&#10;fun SignUpScreen(&#10;    navController: NavHostController,&#10;    authViewModel: AuthViewModel&#10;) {&#10;    var email by remember { mutableStateOf(&quot;&quot;) }&#10;    var password by remember { mutableStateOf(&quot;&quot;) }&#10;    var confirmPassword by remember { mutableStateOf(&quot;&quot;) }&#10;    var passwordsMatch by remember { mutableStateOf(true) }&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(32.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally,&#10;        verticalArrangement = Arrangement.Center&#10;    ) {&#10;        // Title&#10;        Text(&#10;            text = &quot;Create Account&quot;,&#10;            fontSize = 28.sp,&#10;            fontWeight = FontWeight.Bold,&#10;            color = Color(0xFF212121),&#10;            modifier = Modifier.padding(bottom = 32.dp)&#10;        )&#10;&#10;        // Email Field&#10;        OutlinedTextField(&#10;            value = email,&#10;            onValueChange = { email = it },&#10;            label = { Text(&quot;Email Address&quot;) },&#10;            singleLine = true,&#10;            keyboardOptions = KeyboardOptions(&#10;                keyboardType = KeyboardType.Email,&#10;                imeAction = ImeAction.Next&#10;            ),&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(bottom = 16.dp)&#10;        )&#10;&#10;        // Password Field&#10;        OutlinedTextField(&#10;            value = password,&#10;            onValueChange = {&#10;                password = it&#10;                passwordsMatch = it == confirmPassword || confirmPassword.isEmpty()&#10;            },&#10;            label = { Text(&quot;Password&quot;) },&#10;            singleLine = true,&#10;            visualTransformation = PasswordVisualTransformation(),&#10;            keyboardOptions = KeyboardOptions(&#10;                keyboardType = KeyboardType.Password,&#10;                imeAction = ImeAction.Next&#10;            ),&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(bottom = 16.dp)&#10;        )&#10;&#10;        // Confirm Password Field&#10;        OutlinedTextField(&#10;            value = confirmPassword,&#10;            onValueChange = {&#10;                confirmPassword = it&#10;                passwordsMatch = password == it || it.isEmpty()&#10;            },&#10;            label = { Text(&quot;Confirm Password&quot;) },&#10;            singleLine = true,&#10;            visualTransformation = PasswordVisualTransformation(),&#10;            keyboardOptions = KeyboardOptions(&#10;                keyboardType = KeyboardType.Password,&#10;                imeAction = ImeAction.Done&#10;            ),&#10;            isError = !passwordsMatch,&#10;            supportingText = {&#10;                if (!passwordsMatch) {&#10;                    Text(&#10;                        text = &quot;Passwords don't match&quot;,&#10;                        color = MaterialTheme.colorScheme.error&#10;                    )&#10;                }&#10;            },&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(bottom = 24.dp)&#10;        )&#10;&#10;        // Sign Up Button&#10;        Button(&#10;            onClick = {&#10;                if (passwordsMatch &amp;&amp; password.isNotEmpty() &amp;&amp; email.isNotEmpty()) {&#10;                    // Call the ViewModel function directly&#10;                    authViewModel.createUserWithEmailAndPassword(email, password)&#10;                }&#10;            },&#10;            enabled = passwordsMatch &amp;&amp; password.isNotEmpty() &amp;&amp; confirmPassword.isNotEmpty() &amp;&amp; email.isNotEmpty(),&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .height(48.dp)&#10;                .padding(bottom = 16.dp)&#10;        ) {&#10;            Text(&quot;Sign Up&quot;)&#10;        }&#10;&#10;        // Sign In Text&#10;        Text(&#10;            text = &quot;Already have an account? Sign In&quot;,&#10;            color = Color(0xFF1976D2),&#10;            textDecoration = TextDecoration.Underline,&#10;            modifier = Modifier&#10;                .padding(top = 16.dp)&#10;                .clickable {&#10;                    // Use the NavController to navigate to the sign in screen&#10;                    navController.navigate(SignInDestination.route) {&#10;                        popUpTo(navController.graph.startDestinationId)&#10;                        launchSingleTop = true&#10;                    }&#10;                }&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>