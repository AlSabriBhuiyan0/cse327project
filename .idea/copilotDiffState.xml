<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/Android/src/app/src/main/java/com/google/ai/edge/gallery/SignUpScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Android/src/app/src/main/java/com/google/ai/edge/gallery/SignUpScreen.kt" />
              <option name="originalContent" value="package com.google.ai.edge.gallery&#10;&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.text.KeyboardOptions&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.input.ImeAction&#10;import androidx.compose.ui.text.input.KeyboardType&#10;import androidx.compose.ui.text.input.PasswordVisualTransformation&#10;import androidx.compose.ui.text.style.TextDecoration&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.navigation.NavHostController&#10;import com.google.ai.edge.gallery.ui.auth.SignInDestination&#10;&#10;@Composable&#10;fun SignUpScreen(&#10;    navController: NavHostController,&#10;    authViewModel: AuthViewModel&#10;) {&#10;    var email by remember { mutableStateOf(&quot;&quot;) }&#10;    var password by remember { mutableStateOf(&quot;&quot;) }&#10;    var confirmPassword by remember { mutableStateOf(&quot;&quot;) }&#10;    var passwordsMatch by remember { mutableStateOf(true) }&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(32.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally,&#10;        verticalArrangement = Arrangement.Center&#10;    ) {&#10;        // Title&#10;        Text(&#10;            text = &quot;Create Account&quot;,&#10;            fontSize = 28.sp,&#10;            fontWeight = FontWeight.Bold,&#10;            color = Color(0xFF212121),&#10;            modifier = Modifier.padding(bottom = 32.dp)&#10;        )&#10;" />
              <option name="updatedContent" value="package com.google.ai.edge.gallery&#10;&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.text.KeyboardOptions&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.input.ImeAction&#10;import androidx.compose.ui.text.input.KeyboardType&#10;import androidx.compose.ui.text.input.PasswordVisualTransformation&#10;import androidx.compose.ui.text.style.TextDecoration&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.navigation.NavHostController&#10;import com.google.ai.edge.gallery.ui.auth.SignInDestination&#10;&#10;@Composable&#10;fun SignUpScreen(&#10;    navController: NavHostController,&#10;    authViewModel: AuthViewModel&#10;) {&#10;    var email by remember { mutableStateOf(&quot;&quot;) }&#10;    var password by remember { mutableStateOf(&quot;&quot;) }&#10;    var confirmPassword by remember { mutableStateOf(&quot;&quot;) }&#10;    var passwordsMatch by remember { mutableStateOf(true) }&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(32.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally,&#10;        verticalArrangement = Arrangement.Center&#10;    ) {&#10;        // Title&#10;        Text(&#10;            text = &quot;Create Account&quot;,&#10;            fontSize = 28.sp,&#10;            fontWeight = FontWeight.Bold,&#10;            color = Color(0xFF212121),&#10;            modifier = Modifier.padding(bottom = 32.dp)&#10;        )&#10;&#10;        // Email Field&#10;        OutlinedTextField(&#10;            value = email,&#10;            onValueChange = { email = it },&#10;            label = { Text(&quot;Email Address&quot;) },&#10;            singleLine = true,&#10;            keyboardOptions = KeyboardOptions(&#10;                keyboardType = KeyboardType.Email,&#10;                imeAction = ImeAction.Next&#10;            ),&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(bottom = 16.dp)&#10;        )&#10;&#10;        // Password Field&#10;        OutlinedTextField(&#10;            value = password,&#10;            onValueChange = {&#10;                password = it&#10;                passwordsMatch = it == confirmPassword || confirmPassword.isEmpty()&#10;            },&#10;            label = { Text(&quot;Password&quot;) },&#10;            singleLine = true,&#10;            visualTransformation = PasswordVisualTransformation(),&#10;            keyboardOptions = KeyboardOptions(&#10;                keyboardType = KeyboardType.Password,&#10;                imeAction = ImeAction.Next&#10;            ),&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(bottom = 16.dp)&#10;        )&#10;&#10;        // Confirm Password Field&#10;        OutlinedTextField(&#10;            value = confirmPassword,&#10;            onValueChange = {&#10;                confirmPassword = it&#10;                passwordsMatch = password == it || it.isEmpty()&#10;            },&#10;            label = { Text(&quot;Confirm Password&quot;) },&#10;            singleLine = true,&#10;            visualTransformation = PasswordVisualTransformation(),&#10;            keyboardOptions = KeyboardOptions(&#10;                keyboardType = KeyboardType.Password,&#10;                imeAction = ImeAction.Done&#10;            ),&#10;            isError = !passwordsMatch,&#10;            supportingText = {&#10;                if (!passwordsMatch) {&#10;                    Text(&#10;                        text = &quot;Passwords don't match&quot;,&#10;                        color = MaterialTheme.colorScheme.error&#10;                    )&#10;                }&#10;            },&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(bottom = 24.dp)&#10;        )&#10;&#10;        // Sign Up Button&#10;        Button(&#10;            onClick = {&#10;                if (passwordsMatch &amp;&amp; password.isNotEmpty() &amp;&amp; email.isNotEmpty()) {&#10;                    // Call the ViewModel function directly&#10;                    authViewModel.createUserWithEmailAndPassword(email, password)&#10;                }&#10;            },&#10;            enabled = passwordsMatch &amp;&amp; password.isNotEmpty() &amp;&amp; confirmPassword.isNotEmpty() &amp;&amp; email.isNotEmpty(),&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .height(48.dp)&#10;                .padding(bottom = 16.dp)&#10;        ) {&#10;            Text(&quot;Sign Up&quot;)&#10;        }&#10;&#10;        // Sign In Text&#10;        Text(&#10;            text = &quot;Already have an account? Sign In&quot;,&#10;            color = Color(0xFF1976D2),&#10;            textDecoration = TextDecoration.Underline,&#10;            modifier = Modifier&#10;                .padding(top = 16.dp)&#10;                .clickable {&#10;                    // Use the NavController to navigate to the sign in screen&#10;                    navController.navigate(SignInDestination.route) {&#10;                        popUpTo(navController.graph.startDestinationId)&#10;                        launchSingleTop = true&#10;                    }&#10;                }&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Android/src/app/src/main/java/com/google/ai/edge/gallery/ui/navigation/GalleryNavGraph.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Android/src/app/src/main/java/com/google/ai/edge/gallery/ui/navigation/GalleryNavGraph.kt" />
              <option name="originalContent" value="package com.google.ai.edge.gallery.ui.navigation&#10;&#10;import android.util.Log&#10;import androidx.compose.animation.AnimatedContentTransitionScope&#10;import androidx.compose.animation.AnimatedVisibility&#10;import androidx.compose.animation.EnterTransition&#10;import androidx.compose.animation.ExitTransition&#10;import androidx.compose.animation.core.EaseOutExpo&#10;import androidx.compose.animation.core.FiniteAnimationSpec&#10;import androidx.compose.animation.core.tween&#10;import androidx.compose.animation.slideInHorizontally&#10;import androidx.compose.animation.slideOutHorizontally&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.DisposableEffect&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.unit.IntOffset&#10;import androidx.compose.ui.zIndex&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.lifecycle.Lifecycle&#10;import androidx.lifecycle.LifecycleEventObserver&#10;import androidx.lifecycle.compose.LocalLifecycleOwner&#10;import androidx.navigation.NavBackStackEntry&#10;import androidx.navigation.NavHostController&#10;import androidx.navigation.NavType&#10;import androidx.navigation.compose.NavHost&#10;import androidx.navigation.compose.composable&#10;import androidx.navigation.navArgument&#10;import com.google.ai.edge.gallery.data.Model&#10;import com.google.ai.edge.gallery.data.TASK_LLM_ASK_AUDIO&#10;import com.google.ai.edge.gallery.data.TASK_LLM_ASK_IMAGE&#10;import com.google.ai.edge.gallery.data.TASK_LLM_CHAT&#10;import com.google.ai.edge.gallery.data.TASK_LLM_PROMPT_LAB&#10;import com.google.ai.edge.gallery.data.Task&#10;import com.google.ai.edge.gallery.data.TaskType&#10;import com.google.ai.edge.gallery.data.getModelByName&#10;import com.google.ai.edge.gallery.ui.home.HomeScreen&#10;import com.google.ai.edge.gallery.ui.llmchat.LlmAskAudioDestination&#10;import com.google.ai.edge.gallery.ui.llmchat.LlmAskAudioScreen&#10;import com.google.ai.edge.gallery.ui.llmchat.LlmAskAudioViewModel&#10;import com.google.ai.edge.gallery.ui.llmchat.LlmAskImageDestination&#10;import com.google.ai.edge.gallery.ui.llmchat.LlmAskImageScreen&#10;import com.google.ai.edge.gallery.ui.llmchat.LlmAskImageViewModel&#10;import com.google.ai.edge.gallery.ui.llmchat.LlmChatDestination&#10;import com.google.ai.edge.gallery.ui.llmchat.LlmChatScreen&#10;import com.google.ai.edge.gallery.ui.llmchat.LlmChatViewModel&#10;import com.google.ai.edge.gallery.ui.llmsingleturn.LlmSingleTurnDestination&#10;import com.google.ai.edge.gallery.ui.llmsingleturn.LlmSingleTurnScreen&#10;import com.google.ai.edge.gallery.ui.llmsingleturn.LlmSingleTurnViewModel&#10;import com.google.ai.edge.gallery.ui.modelmanager.ModelManager&#10;import com.google.ai.edge.gallery.ui.modelmanager.ModelManagerViewModel&#10;&#10;// Auth screen routes&#10;object SignInDestination {&#10;  const val route = &quot;sign_in&quot;&#10;}&#10;&#10;object SignUpDestination {&#10;  const val route = &quot;sign_up&quot;&#10;}&#10;&#10;private const val TAG = &quot;AGGalleryNavGraph&quot;&#10;private const val ROUTE_PLACEHOLDER = &quot;placeholder&quot;&#10;private const val ENTER_ANIMATION_DURATION_MS = 500&#10;private val ENTER_ANIMATION_EASING = EaseOutExpo&#10;private const val ENTER_ANIMATION_DELAY_MS = 100&#10;&#10;private const val EXIT_ANIMATION_DURATION_MS = 500&#10;private val EXIT_ANIMATION_EASING = EaseOutExpo&#10;&#10;private fun enterTween(): FiniteAnimationSpec&lt;IntOffset&gt; {&#10;  return tween(&#10;    ENTER_ANIMATION_DURATION_MS,&#10;    easing = ENTER_ANIMATION_EASING,&#10;    delayMillis = ENTER_ANIMATION_DELAY_MS,&#10;  )&#10;}&#10;&#10;private fun exitTween(): FiniteAnimationSpec&lt;IntOffset&gt; {&#10;  return tween(EXIT_ANIMATION_DURATION_MS, easing = EXIT_ANIMATION_EASING)&#10;}&#10;&#10;private fun AnimatedContentTransitionScope&lt;*&gt;.slideEnter(): EnterTransition {&#10;  return slideIntoContainer(&#10;    animationSpec = enterTween(),&#10;    towards = AnimatedContentTransitionScope.SlideDirection.Left,&#10;  )&#10;}&#10;&#10;private fun AnimatedContentTransitionScope&lt;*&gt;.slideExit(): ExitTransition {&#10;  return slideOutOfContainer(&#10;    animationSpec = exitTween(),&#10;    towards = AnimatedContentTransitionScope.SlideDirection.Right,&#10;  )&#10;}&#10;&#10;/** Navigation routes. */&#10;@Composable&#10;fun GalleryNavHost(&#10;  navController: NavHostController,&#10;  modifier: Modifier = Modifier,&#10;  modelManagerViewModel: ModelManagerViewModel = hiltViewModel(),&#10;) {&#10;  val lifecycleOwner = LocalLifecycleOwner.current&#10;  var showModelManager by remember { mutableStateOf(false) }&#10;  var pickedTask by remember { mutableStateOf&lt;Task?&gt;(null) }&#10;&#10;  // Track whether app is in foreground.&#10;  DisposableEffect(lifecycleOwner) {&#10;    val observer = LifecycleEventObserver { _, event -&gt;&#10;      when (event) {&#10;        Lifecycle.Event.ON_START,&#10;        Lifecycle.Event.ON_RESUME -&gt; {&#10;          modelManagerViewModel.setAppInForeground(foreground = true)&#10;        }&#10;        Lifecycle.Event.ON_STOP,&#10;        Lifecycle.Event.ON_PAUSE -&gt; {&#10;          modelManagerViewModel.setAppInForeground(foreground = false)&#10;        }&#10;        else -&gt; {&#10;          /* Do nothing for other events */&#10;        }&#10;      }&#10;    }&#10;&#10;    lifecycleOwner.lifecycle.addObserver(observer)&#10;&#10;    onDispose { lifecycleOwner.lifecycle.removeObserver(observer) }&#10;  }&#10;&#10;  HomeScreen(&#10;    modelManagerViewModel = modelManagerViewModel,&#10;    navigateToTaskScreen = { task -&gt;&#10;      pickedTask = task&#10;      showModelManager = true&#10;    },&#10;  )&#10;&#10;  // Model manager.&#10;  AnimatedVisibility(&#10;    visible = showModelManager,&#10;    enter = slideInHorizontally(initialOffsetX = { it }),&#10;    exit = slideOutHorizontally(targetOffsetX = { it }),&#10;  ) {&#10;    val curPickedTask = pickedTask&#10;    if (curPickedTask != null) {&#10;      ModelManager(&#10;        viewModel = modelManagerViewModel,&#10;        task = curPickedTask,&#10;        onModelClicked = { model -&gt;&#10;          navigateToTaskScreen(&#10;            navController = navController,&#10;            taskType = curPickedTask.type,&#10;            model = model,&#10;          )&#10;        },&#10;        navigateUp = { showModelManager = false },&#10;      )&#10;    }&#10;  }&#10;&#10;  NavHost(&#10;    navController = navController,&#10;    // Default to open home screen.&#10;    startDestination = ROUTE_PLACEHOLDER,&#10;    enterTransition = { EnterTransition.None },&#10;    exitTransition = { ExitTransition.None },&#10;    modifier = modifier.zIndex(1f),&#10;  ) {&#10;    // Placeholder root screen&#10;    composable(route = ROUTE_PLACEHOLDER) { Text(&quot;&quot;) }&#10;&#10;    // LLM chat demos.&#10;    composable(&#10;      route = &quot;${LlmChatDestination.route}/{modelName}&quot;,&#10;      arguments = listOf(navArgument(&quot;modelName&quot;) { type = NavType.StringType }),&#10;      enterTransition = { slideEnter() },&#10;      exitTransition = { slideExit() },&#10;    ) { backStackEntry -&gt;&#10;      val viewModel: LlmChatViewModel = hiltViewModel(backStackEntry)&#10;&#10;      getModelFromNavigationParam(backStackEntry, TASK_LLM_CHAT)?.let { defaultModel -&gt;&#10;        modelManagerViewModel.selectModel(defaultModel)&#10;&#10;        LlmChatScreen(&#10;          viewModel = viewModel,&#10;          modelManagerViewModel = modelManagerViewModel,&#10;          navigateUp = { navController.navigateUp() },&#10;        )&#10;      }&#10;    }&#10;&#10;    // LLM single turn.&#10;    composable(&#10;      route = &quot;${LlmSingleTurnDestination.route}/{modelName}&quot;,&#10;      arguments = listOf(navArgument(&quot;modelName&quot;) { type = NavType.StringType }),&#10;      enterTransition = { slideEnter() },&#10;      exitTransition = { slideExit() },&#10;    ) { backStackEntry -&gt;&#10;      val viewModel: LlmSingleTurnViewModel = hiltViewModel(backStackEntry)&#10;&#10;      getModelFromNavigationParam(backStackEntry, TASK_LLM_PROMPT_LAB)?.let { defaultModel -&gt;&#10;        modelManagerViewModel.selectModel(defaultModel)&#10;&#10;        LlmSingleTurnScreen(&#10;          viewModel = viewModel,&#10;          modelManagerViewModel = modelManagerViewModel,&#10;          navigateUp = { navController.navigateUp() },&#10;        )&#10;      }&#10;    }&#10;&#10;    // Ask image.&#10;    composable(&#10;      route = &quot;${LlmAskImageDestination.route}/{modelName}&quot;,&#10;      arguments = listOf(navArgument(&quot;modelName&quot;) { type = NavType.StringType }),&#10;      enterTransition = { slideEnter() },&#10;      exitTransition = { slideExit() },&#10;    ) { backStackEntry -&gt;&#10;      val viewModel: LlmAskImageViewModel = hiltViewModel()&#10;&#10;      getModelFromNavigationParam(backStackEntry, TASK_LLM_ASK_IMAGE)?.let { defaultModel -&gt;&#10;        modelManagerViewModel.selectModel(defaultModel)&#10;&#10;        LlmAskImageScreen(&#10;          viewModel = viewModel,&#10;          modelManagerViewModel = modelManagerViewModel,&#10;          navigateUp = { navController.navigateUp() },&#10;        )&#10;      }&#10;    }&#10;&#10;    // Ask audio.&#10;    composable(&#10;      route = &quot;${LlmAskAudioDestination.route}/{modelName}&quot;,&#10;      arguments = listOf(navArgument(&quot;modelName&quot;) { type = NavType.StringType }),&#10;      enterTransition = { slideEnter() },&#10;      exitTransition = { slideExit() },&#10;    ) { backStackEntry -&gt;&#10;      val viewModel: LlmAskAudioViewModel = hiltViewModel()&#10;&#10;      getModelFromNavigationParam(backStackEntry, TASK_LLM_ASK_AUDIO)?.let { defaultModel -&gt;&#10;        modelManagerViewModel.selectModel(defaultModel)&#10;&#10;        LlmAskAudioScreen(&#10;          viewModel = viewModel,&#10;          modelManagerViewModel = modelManagerViewModel,&#10;          navigateUp = { navController.navigateUp() },&#10;        )&#10;      }&#10;    }&#10;  }&#10;&#10;  // Handle incoming intents for deep links&#10;  val intent = androidx.activity.compose.LocalActivity.current?.intent&#10;  val data = intent?.data&#10;  if (data != null) {&#10;    intent.data = null&#10;    Log.d(TAG, &quot;navigation link clicked: $data&quot;)&#10;    if (data.toString().startsWith(&quot;com.google.ai.edge.gallery://model/&quot;)) {&#10;      val modelName = data.pathSegments.last()&#10;      getModelByName(modelName)?.let { model -&gt;&#10;        // TODO(jingjin): need to show a list of possible tasks for this model.&#10;        navigateToTaskScreen(&#10;          navController = navController,&#10;          taskType = TaskType.LLM_CHAT,&#10;          model = model,&#10;        )&#10;      }&#10;    }&#10;  }&#10;}&#10;&#10;fun navigateToTaskScreen(&#10;  navController: NavHostController,&#10;  taskType: TaskType,&#10;  model: Model? = null,&#10;) {&#10;  val modelName = model?.name ?: &quot;&quot;&#10;  when (taskType) {&#10;    TaskType.LLM_CHAT -&gt; navController.navigate(&quot;${LlmChatDestination.route}/${modelName}&quot;)&#10;    TaskType.LLM_ASK_IMAGE -&gt; navController.navigate(&quot;${LlmAskImageDestination.route}/${modelName}&quot;)&#10;    TaskType.LLM_ASK_AUDIO -&gt; navController.navigate(&quot;${LlmAskAudioDestination.route}/${modelName}&quot;)&#10;    TaskType.LLM_PROMPT_LAB -&gt;&#10;      navController.navigate(&quot;${LlmSingleTurnDestination.route}/${modelName}&quot;)&#10;    TaskType.TEST_TASK_1 -&gt; {}&#10;    TaskType.TEST_TASK_2 -&gt; {}&#10;  }&#10;}&#10;&#10;fun getModelFromNavigationParam(entry: NavBackStackEntry, task: Task): Model? {&#10;  var modelName = entry.arguments?.getString(&quot;modelName&quot;) ?: &quot;&quot;&#10;  if (modelName.isEmpty()) {&#10;    modelName = task.models[0].name&#10;  }&#10;  val model = getModelByName(modelName)&#10;  return model&#10;}&#10;" />
              <option name="updatedContent" value="package com.google.ai.edge.gallery.ui.navigation&#13;&#10;&#13;&#10;import android.util.Log&#13;&#10;import androidx.compose.animation.AnimatedContentTransitionScope&#13;&#10;import androidx.compose.animation.AnimatedVisibility&#13;&#10;import androidx.compose.animation.EnterTransition&#13;&#10;import androidx.compose.animation.ExitTransition&#13;&#10;import androidx.compose.animation.core.EaseOutExpo&#13;&#10;import androidx.compose.animation.core.FiniteAnimationSpec&#13;&#10;import androidx.compose.animation.core.tween&#13;&#10;import androidx.compose.animation.slideInHorizontally&#13;&#10;import androidx.compose.animation.slideOutHorizontally&#13;&#10;import androidx.compose.material3.Text&#13;&#10;import androidx.compose.runtime.Composable&#13;&#10;import androidx.compose.runtime.DisposableEffect&#13;&#10;import androidx.compose.runtime.getValue&#13;&#10;import androidx.compose.runtime.mutableStateOf&#13;&#10;import androidx.compose.runtime.remember&#13;&#10;import androidx.compose.runtime.setValue&#13;&#10;import androidx.compose.ui.Modifier&#13;&#10;import androidx.compose.ui.unit.IntOffset&#13;&#10;import androidx.compose.ui.zIndex&#13;&#10;import androidx.hilt.navigation.compose.hiltViewModel&#13;&#10;import androidx.lifecycle.Lifecycle&#13;&#10;import androidx.lifecycle.LifecycleEventObserver&#13;&#10;import androidx.lifecycle.compose.LocalLifecycleOwner&#13;&#10;import androidx.navigation.NavBackStackEntry&#13;&#10;import androidx.navigation.NavHostController&#13;&#10;import androidx.navigation.NavType&#13;&#10;import androidx.navigation.compose.NavHost&#13;&#10;import androidx.navigation.compose.composable&#13;&#10;import androidx.navigation.navArgument&#13;&#10;import com.google.ai.edge.gallery.data.Model&#13;&#10;import com.google.ai.edge.gallery.data.TASK_LLM_ASK_AUDIO&#13;&#10;import com.google.ai.edge.gallery.data.TASK_LLM_ASK_IMAGE&#13;&#10;import com.google.ai.edge.gallery.data.TASK_LLM_CHAT&#13;&#10;import com.google.ai.edge.gallery.data.TASK_LLM_PROMPT_LAB&#13;&#10;import com.google.ai.edge.gallery.data.Task&#13;&#10;import com.google.ai.edge.gallery.data.TaskType&#13;&#10;import com.google.ai.edge.gallery.data.getModelByName&#13;&#10;import com.google.ai.edge.gallery.ui.auth.AuthViewModel&#13;&#10;import com.google.ai.edge.gallery.ui.auth.SignInDestination&#13;&#10;import com.google.ai.edge.gallery.ui.auth.SignInScreen&#13;&#10;import com.google.ai.edge.gallery.ui.auth.SignUpDestination&#13;&#10;import com.google.ai.edge.gallery.ui.auth.SignUpScreen&#13;&#10;import com.google.ai.edge.gallery.ui.home.HomeScreen&#13;&#10;import com.google.ai.edge.gallery.ui.llmchat.LlmAskAudioDestination&#13;&#10;import com.google.ai.edge.gallery.ui.llmchat.LlmAskAudioScreen&#13;&#10;import com.google.ai.edge.gallery.ui.llmchat.LlmAskAudioViewModel&#13;&#10;import com.google.ai.edge.gallery.ui.llmchat.LlmAskImageDestination&#13;&#10;import com.google.ai.edge.gallery.ui.llmchat.LlmAskImageScreen&#13;&#10;import com.google.ai.edge.gallery.ui.llmchat.LlmAskImageViewModel&#13;&#10;import com.google.ai.edge.gallery.ui.llmchat.LlmChatDestination&#13;&#10;import com.google.ai.edge.gallery.ui.llmchat.LlmChatScreen&#13;&#10;import com.google.ai.edge.gallery.ui.llmchat.LlmChatViewModel&#13;&#10;import com.google.ai.edge.gallery.ui.llmsingleturn.LlmSingleTurnDestination&#13;&#10;import com.google.ai.edge.gallery.ui.llmsingleturn.LlmSingleTurnScreen&#13;&#10;import com.google.ai.edge.gallery.ui.llmsingleturn.LlmSingleTurnViewModel&#13;&#10;import com.google.ai.edge.gallery.ui.modelmanager.ModelManager&#13;&#10;import com.google.ai.edge.gallery.ui.modelmanager.ModelManagerViewModel&#13;&#10;&#13;&#10;// Auth screen routes&#13;&#10;object SignInDestination {&#13;&#10;  const val route = &quot;sign_in&quot;&#13;&#10;}&#13;&#10;&#13;&#10;object SignUpDestination {&#13;&#10;  const val route = &quot;sign_up&quot;&#13;&#10;}&#13;&#10;&#13;&#10;private const val TAG = &quot;AGGalleryNavGraph&quot;&#13;&#10;private const val ROUTE_PLACEHOLDER = &quot;placeholder&quot;&#13;&#10;private const val ENTER_ANIMATION_DURATION_MS = 500&#13;&#10;private val ENTER_ANIMATION_EASING = EaseOutExpo&#13;&#10;private const val ENTER_ANIMATION_DELAY_MS = 100&#13;&#10;&#13;&#10;private const val EXIT_ANIMATION_DURATION_MS = 500&#13;&#10;private val EXIT_ANIMATION_EASING = EaseOutExpo&#13;&#10;&#13;&#10;private fun enterTween(): FiniteAnimationSpec&lt;IntOffset&gt; {&#13;&#10;  return tween(&#13;&#10;    ENTER_ANIMATION_DURATION_MS,&#13;&#10;    easing = ENTER_ANIMATION_EASING,&#13;&#10;    delayMillis = ENTER_ANIMATION_DELAY_MS,&#13;&#10;  )&#13;&#10;}&#13;&#10;&#13;&#10;private fun exitTween(): FiniteAnimationSpec&lt;IntOffset&gt; {&#13;&#10;  return tween(EXIT_ANIMATION_DURATION_MS, easing = EXIT_ANIMATION_EASING)&#13;&#10;}&#13;&#10;&#13;&#10;private fun AnimatedContentTransitionScope&lt;*&gt;.slideEnter(): EnterTransition {&#13;&#10;  return slideIntoContainer(&#13;&#10;    animationSpec = enterTween(),&#13;&#10;    towards = AnimatedContentTransitionScope.SlideDirection.Left,&#13;&#10;  )&#13;&#10;}&#13;&#10;&#13;&#10;private fun AnimatedContentTransitionScope&lt;*&gt;.slideExit(): ExitTransition {&#13;&#10;  return slideOutOfContainer(&#13;&#10;    animationSpec = exitTween(),&#13;&#10;    towards = AnimatedContentTransitionScope.SlideDirection.Right,&#13;&#10;  )&#13;&#10;}&#13;&#10;&#13;&#10;/** Navigation routes. */&#13;&#10;@Composable&#13;&#10;fun GalleryNavHost(&#13;&#10;  navController: NavHostController,&#13;&#10;  modifier: Modifier = Modifier,&#13;&#10;  modelManagerViewModel: ModelManagerViewModel = hiltViewModel(),&#13;&#10;) {&#13;&#10;  val lifecycleOwner = LocalLifecycleOwner.current&#13;&#10;  var showModelManager by remember { mutableStateOf(false) }&#13;&#10;  var pickedTask by remember { mutableStateOf&lt;Task?&gt;(null) }&#13;&#10;&#13;&#10;  // Track whether app is in foreground.&#13;&#10;  DisposableEffect(lifecycleOwner) {&#13;&#10;    val observer = LifecycleEventObserver { _, event -&gt;&#13;&#10;      when (event) {&#13;&#10;        Lifecycle.Event.ON_START,&#13;&#10;        Lifecycle.Event.ON_RESUME -&gt; {&#13;&#10;          modelManagerViewModel.setAppInForeground(foreground = true)&#13;&#10;        }&#13;&#10;        Lifecycle.Event.ON_STOP,&#13;&#10;        Lifecycle.Event.ON_PAUSE -&gt; {&#13;&#10;          modelManagerViewModel.setAppInForeground(foreground = false)&#13;&#10;        }&#13;&#10;        else -&gt; {&#13;&#10;          /* Do nothing for other events */&#13;&#10;        }&#13;&#10;      }&#13;&#10;    }&#13;&#10;&#13;&#10;    lifecycleOwner.lifecycle.addObserver(observer)&#13;&#10;&#13;&#10;    onDispose { lifecycleOwner.lifecycle.removeObserver(observer) }&#13;&#10;  }&#13;&#10;&#13;&#10;  HomeScreen(&#13;&#10;    modelManagerViewModel = modelManagerViewModel,&#13;&#10;    navigateToTaskScreen = { task -&gt;&#13;&#10;      pickedTask = task&#13;&#10;      showModelManager = true&#13;&#10;    },&#13;&#10;  )&#13;&#10;&#13;&#10;  // Model manager.&#13;&#10;  AnimatedVisibility(&#13;&#10;    visible = showModelManager,&#13;&#10;    enter = slideInHorizontally(initialOffsetX = { it }),&#13;&#10;    exit = slideOutHorizontally(targetOffsetX = { it }),&#13;&#10;  ) {&#13;&#10;    val curPickedTask = pickedTask&#13;&#10;    if (curPickedTask != null) {&#13;&#10;      ModelManager(&#13;&#10;        viewModel = modelManagerViewModel,&#13;&#10;        task = curPickedTask,&#13;&#10;        onModelClicked = { model -&gt;&#13;&#10;          navigateToTaskScreen(&#13;&#10;            navController = navController,&#13;&#10;            taskType = curPickedTask.type,&#13;&#10;            model = model,&#13;&#10;          )&#13;&#10;        },&#13;&#10;        navigateUp = { showModelManager = false },&#13;&#10;      )&#13;&#10;    }&#13;&#10;  }&#13;&#10;&#13;&#10;  NavHost(&#13;&#10;    navController = navController,&#13;&#10;    // Default to open home screen.&#13;&#10;    startDestination = ROUTE_PLACEHOLDER,&#13;&#10;    enterTransition = { EnterTransition.None },&#13;&#10;    exitTransition = { ExitTransition.None },&#13;&#10;    modifier = modifier.zIndex(1f),&#13;&#10;  ) {&#13;&#10;    // Placeholder root screen&#13;&#10;    composable(route = ROUTE_PLACEHOLDER) { Text(&quot;&quot;) }&#13;&#10;&#13;&#10;    // Auth screens&#13;&#10;    composable(route = SignInDestination.route) {&#13;&#10;      val authViewModel: AuthViewModel = hiltViewModel()&#13;&#10;      SignInScreen(&#13;&#10;        navController = navController,&#13;&#10;        authViewModel = authViewModel&#13;&#10;      )&#13;&#10;    }&#13;&#10;&#13;&#10;    composable(route = SignUpDestination.route) {&#13;&#10;      val authViewModel: AuthViewModel = hiltViewModel()&#13;&#10;      SignUpScreen(&#13;&#10;        navController = navController,&#13;&#10;        authViewModel = authViewModel&#13;&#10;      )&#13;&#10;    }&#13;&#10;&#13;&#10;    // LLM chat demos.&#13;&#10;    composable(&#13;&#10;      route = &quot;${LlmChatDestination.route}/{modelName}&quot;,&#13;&#10;      arguments = listOf(navArgument(&quot;modelName&quot;) { type = NavType.StringType }),&#13;&#10;      enterTransition = { slideEnter() },&#13;&#10;      exitTransition = { slideExit() },&#13;&#10;    ) { backStackEntry -&gt;&#13;&#10;      val viewModel: LlmChatViewModel = hiltViewModel(backStackEntry)&#13;&#10;&#13;&#10;      getModelFromNavigationParam(backStackEntry, TASK_LLM_CHAT)?.let { defaultModel -&gt;&#13;&#10;        modelManagerViewModel.selectModel(defaultModel)&#13;&#10;&#13;&#10;        LlmChatScreen(&#13;&#10;          viewModel = viewModel,&#13;&#10;          modelManagerViewModel = modelManagerViewModel,&#13;&#10;          navigateUp = { navController.navigateUp() },&#13;&#10;        )&#13;&#10;      }&#13;&#10;    }&#13;&#10;&#13;&#10;    // LLM single turn.&#13;&#10;    composable(&#13;&#10;      route = &quot;${LlmSingleTurnDestination.route}/{modelName}&quot;,&#13;&#10;      arguments = listOf(navArgument(&quot;modelName&quot;) { type = NavType.StringType }),&#13;&#10;      enterTransition = { slideEnter() },&#13;&#10;      exitTransition = { slideExit() },&#13;&#10;    ) { backStackEntry -&gt;&#13;&#10;      val viewModel: LlmSingleTurnViewModel = hiltViewModel(backStackEntry)&#13;&#10;&#13;&#10;      getModelFromNavigationParam(backStackEntry, TASK_LLM_PROMPT_LAB)?.let { defaultModel -&gt;&#13;&#10;        modelManagerViewModel.selectModel(defaultModel)&#13;&#10;&#13;&#10;        LlmSingleTurnScreen(&#13;&#10;          viewModel = viewModel,&#13;&#10;          modelManagerViewModel = modelManagerViewModel,&#13;&#10;          navigateUp = { navController.navigateUp() },&#13;&#10;        )&#13;&#10;      }&#13;&#10;    }&#13;&#10;&#13;&#10;    // Ask image.&#13;&#10;    composable(&#13;&#10;      route = &quot;${LlmAskImageDestination.route}/{modelName}&quot;,&#13;&#10;      arguments = listOf(navArgument(&quot;modelName&quot;) { type = NavType.StringType }),&#13;&#10;      enterTransition = { slideEnter() },&#13;&#10;      exitTransition = { slideExit() },&#13;&#10;    ) { backStackEntry -&gt;&#13;&#10;      val viewModel: LlmAskImageViewModel = hiltViewModel()&#13;&#10;&#13;&#10;      getModelFromNavigationParam(backStackEntry, TASK_LLM_ASK_IMAGE)?.let { defaultModel -&gt;&#13;&#10;        modelManagerViewModel.selectModel(defaultModel)&#13;&#10;&#13;&#10;        LlmAskImageScreen(&#13;&#10;          viewModel = viewModel,&#13;&#10;          modelManagerViewModel = modelManagerViewModel,&#13;&#10;          navigateUp = { navController.navigateUp() },&#13;&#10;        )&#13;&#10;      }&#13;&#10;    }&#13;&#10;&#13;&#10;    // Ask audio.&#13;&#10;    composable(&#13;&#10;      route = &quot;${LlmAskAudioDestination.route}/{modelName}&quot;,&#13;&#10;      arguments = listOf(navArgument(&quot;modelName&quot;) { type = NavType.StringType }),&#13;&#10;      enterTransition = { slideEnter() },&#13;&#10;      exitTransition = { slideExit() },&#13;&#10;    ) { backStackEntry -&gt;&#13;&#10;      val viewModel: LlmAskAudioViewModel = hiltViewModel()&#13;&#10;&#13;&#10;      getModelFromNavigationParam(backStackEntry, TASK_LLM_ASK_AUDIO)?.let { defaultModel -&gt;&#13;&#10;        modelManagerViewModel.selectModel(defaultModel)&#13;&#10;&#13;&#10;        LlmAskAudioScreen(&#13;&#10;          viewModel = viewModel,&#13;&#10;          modelManagerViewModel = modelManagerViewModel,&#13;&#10;          navigateUp = { navController.navigateUp() },&#13;&#10;        )&#13;&#10;      }&#13;&#10;    }&#13;&#10;  }&#13;&#10;&#13;&#10;  // Handle incoming intents for deep links&#13;&#10;  val intent = androidx.activity.compose.LocalActivity.current?.intent&#13;&#10;  val data = intent?.data&#13;&#10;  if (data != null) {&#13;&#10;    intent.data = null&#13;&#10;    Log.d(TAG, &quot;navigation link clicked: $data&quot;)&#13;&#10;    if (data.toString().startsWith(&quot;com.google.ai.edge.gallery://model/&quot;)) {&#13;&#10;      val modelName = data.pathSegments.last()&#13;&#10;      getModelByName(modelName)?.let { model -&gt;&#13;&#10;        // TODO(jingjin): need to show a list of possible tasks for this model.&#13;&#10;        navigateToTaskScreen(&#13;&#10;          navController = navController,&#13;&#10;          taskType = TaskType.LLM_CHAT,&#13;&#10;          model = model,&#13;&#10;        )&#13;&#10;      }&#13;&#10;    }&#13;&#10;  }&#13;&#10;}&#13;&#10;&#13;&#10;fun navigateToTaskScreen(&#13;&#10;  navController: NavHostController,&#13;&#10;  taskType: TaskType,&#13;&#10;  model: Model? = null,&#13;&#10;) {&#13;&#10;  val modelName = model?.name ?: &quot;&quot;&#13;&#10;  when (taskType) {&#13;&#10;    TaskType.LLM_CHAT -&gt; navController.navigate(&quot;${LlmChatDestination.route}/${modelName}&quot;)&#13;&#10;    TaskType.LLM_ASK_IMAGE -&gt; navController.navigate(&quot;${LlmAskImageDestination.route}/${modelName}&quot;)&#13;&#10;    TaskType.LLM_ASK_AUDIO -&gt; navController.navigate(&quot;${LlmAskAudioDestination.route}/${modelName}&quot;)&#13;&#10;    TaskType.LLM_PROMPT_LAB -&gt;&#13;&#10;      navController.navigate(&quot;${LlmSingleTurnDestination.route}/${modelName}&quot;)&#13;&#10;    TaskType.TEST_TASK_1 -&gt; {}&#13;&#10;    TaskType.TEST_TASK_2 -&gt; {}&#13;&#10;  }&#13;&#10;}&#13;&#10;&#13;&#10;fun getModelFromNavigationParam(entry: NavBackStackEntry, task: Task): Model? {&#13;&#10;  var modelName = entry.arguments?.getString(&quot;modelName&quot;) ?: &quot;&quot;&#13;&#10;  if (modelName.isEmpty()) {&#13;&#10;    modelName = task.models[0].name&#13;&#10;  }&#13;&#10;  val model = getModelByName(modelName)&#13;&#10;  return model&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>